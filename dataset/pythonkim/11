<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="텐서플로우를 사용해서 비용(cost)과 기울기(W)가 어떻게 변화하는지 보여주는 코드를 설명한다. import tensorflow as tf X = [1., 2., 3.] Y = [1., 2., 3.] m = len(X) W = tf.placeholder(tf.float32) hypothesis = tf.mul(W, X) cost = tf.reduce_sum(tf.pow(hypothesis-Y, 2)) / m init = tf.initialize_all_variables() sess = tf.Session() sess.run(init) # 그래프로 표시하기 위해 데이터를 누적할 리스트 W_val, cos..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/11" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/11" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)" ><meta name="by" content="사과쿵" ><meta property="og:description" content="텐서플로우를 사용해서 비용(cost)과 기울기(W)가 어떻게 변화하는지 보여주는 코드를 설명한다. import tensorflow as tf X = [1., 2., 3.] Y = [1., 2., 3.] m = len(X) W = tf.placeholder(tf.float32) hypothesis = tf.mul(W, X) cost = tf.reduce_sum(tf.pow(hypothesis-Y, 2)) / m init = tf.initialize_all_variables() sess = tf.Session() sess.run(init) # 그래프로 표시하기 위해 데이터를 누적할 리스트 W_val, cos.." ><meta property="og:image" content="http://cfile4.uf.tistory.com/image/211BE03D5791FB452DD050" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)" ><meta name="twitter:description" content="텐서플로우를 사용해서 비용(cost)과 기울기(W)가 어떻게 변화하는지 보여주는 코드를 설명한다. import tensorflow as tf X = [1., 2., 3.] Y = [1., 2., 3.] m = len(X) W = tf.placeholder(tf.float32) hypothesis = tf.mul(W, X) cost = tf.reduce_sum(tf.pow(hypothesis-Y, 2)) / m init = tf.initialize_all_variables() sess = tf.Session() sess.run(init) # 그래프로 표시하기 위해 데이터를 누적할 리스트 W_val, cos.." ><meta property="twitter:image" content="http://cfile4.uf.tistory.com/image/211BE03D5791FB452DD050" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/11" ><meta name="plink" content="http://pythonkim.tistory.com/11" ><meta name="title" content="05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/11" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/11" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/11" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/11" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_11" /><meta property="article:published_time" content="2016-07-22T20:49:32+09:00" ><meta property="og:regDate" content="20160722204932" ><meta property="article:modified_time" content="2017-01-11T12:14:55+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/11"},"url":"http://pythonkim.tistory.com/11","headline":"05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)","description":"텐서플로우를 사용해서 비용(cost)과 기울기(W)가 어떻게 변화하는지 보여주는 코드를 설명한다. import tensorflow as tf X = [1., 2., 3.] Y = [1., 2., 3.] m = len(X) W = tf.placeholder(tf.float32) hypothesis = tf.mul(W, X) cost = tf.reduce_sum(tf.pow(hypothesis-Y, 2)) / m init = tf.initialize_all_variables() sess = tf.Session() sess.run(init) # 그래프로 표시하기 위해 데이터를 누적할 리스트 W_val, cos..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile4.uf.tistory.com/image/211BE03D5791FB452DD050","width":"800px","height":"800px"},"datePublished":"20160722T20:49:32+09:00","dateModified":"20170111T12:14:55+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/12","NEXT_PAGE":"\/10","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F11","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.07.22 20:49</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:584px;;height:auto;max-width:100%"><img src="http://cfile10.uf.tistory.com/image/2631C335579E32C13899BC" style="max-width:100%;height:auto" width="584" height="309" filename="lab_03_00.png" filemime="image/jpeg"/></span></p>
<p>텐서플로우를 사용해서 비용(cost)과 기울기(W)가 어떻게 변화하는지 보여주는 코드를 설명한다.</p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br />X <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">3.</span>]<br />Y <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">3.</span>]<br />m <span style="color:#f92672;">= </span><span style="color:#66d9ef;">len</span>(X)<br /><br />W <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)<br /><br />hypothesis <span style="color:#f92672;">= </span>tf.mul(W, X)<br />cost <span style="color:#f92672;">= </span>tf.reduce_sum(tf.pow(hypothesis<span style="color:#f92672;">-</span>Y, <span style="color:#ae81ff;">2</span>)) <span style="color:#f92672;">/ </span>m<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#75715e;"># 그래프로 표시하기 위해 데이터를 누적할 리스트<br /></span>W_val, cost_val <span style="color:#f92672;">= </span>[], []<br /><br /><span style="color:#75715e;"># 0.1 단위로 증가할 수 없어서 -30부터 시작. 그래프에는 -3에서 5까지 표시됨.<br /></span><span style="color:#66d9ef;font-style:italic;">for </span>i <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#f92672;">-</span><span style="color:#ae81ff;">30</span>, <span style="color:#ae81ff;">51</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>xPos <span style="color:#f92672;">= </span>i<span style="color:#f92672;">*</span><span style="color:#ae81ff;">0.1                                    </span><span style="color:#75715e;"># x 좌표. -3에서 5까지 0.1씩 증가<br /></span><span style="color:#75715e;">    </span>yPos <span style="color:#f92672;">= </span>sess.run(cost, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{W<span style="color:#f92672;">: </span>xPos})      <span style="color:#75715e;"># x 좌표에 따른 y 값<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'{:3.1f}, {:3.1f}'</span>.format(xPos, yPos))<br /><br />    <span style="color:#75715e;"># 그래프에 표시할 데이터 누적. 단순히 리스트에 갯수를 늘려나감<br /></span><span style="color:#75715e;">    </span>W_val.append(xPos)<br />    cost_val.append(yPos)<br /><br />sess.close()
<br /><span style="color:#75715e;"># ------------------------------------------ #<br /></span><span style="color:#75715e;"><br /></span><span style="color:#66d9ef;font-style:italic;">import </span>matplotlib.pyplot <span style="color:#66d9ef;font-style:italic;">as </span>plt<br /><br />plt.plot(W_val, cost_val, <span style="color:#008080;font-weight:bold;">'ro'</span>)<br />plt.ylabel(<span style="color:#008080;font-weight:bold;">'Cost'</span>)<br />plt.xlabel(<span style="color:#008080;font-weight:bold;">'W'</span>)<br />plt.show()<br /></pre><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;">[출력 결과]
...<br /><span style="color: rgb(255, 255, 255);">4.6</span><span style="color: rgb(255, 255, 255);">, </span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">60.5</span><br /></span><span style="color: rgb(255, 255, 255);">4.7</span><span style="color: rgb(255, 255, 255);">, </span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">63.9</span><br /></span><span style="color: rgb(255, 255, 255);">4.8</span><span style="color: rgb(255, 255, 255);">, </span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">67.4</span><br /></span><span style="color: rgb(255, 255, 255);">4.9</span><span style="color: rgb(255, 255, 255);">, </span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">71.0</span><br /></span><span style="color: rgb(255, 255, 255);">5.0</span><span style="color: rgb(255, 255, 255);">, </span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">74.7</span><br /></span></pre><p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:577px;;height:auto;max-width:100%"><img src="http://cfile4.uf.tistory.com/image/211BE03D5791FB452DD050" style="max-width:100%;height:auto" width="577" height="448" filename="lab_03_01.png" filemime="image/jpeg"/></span></p>
<p>[출력 결과]는 그래프에 표시된 좌표를 보여준다.  -3에서 5까지 81개의 좌표가 나왔다. 출력된 숫자는 왼쪽 열이 W, 오른쪽 열이 Cost가 된다.<br /></p>
<p>이 코드에서는 최소 비용을 찾는 것이 목적이 아니라 최소 비용을 포함하고 있는 W의 값까지 포함해서  일정 범위의 W에 대한 Cost를 계산해서 Cost가 어떻게 변화하는지 보여주는 것이 목적이다.</p>
<p>그래프는 W가 변화할 때의 Cost를 보여준다는 것을 명심하자. 앞선 글에서 빨강 점 단위로 이동한다고 가정할 때, 해당 위치(Cost)에서 미분한 결과를 빼면 가능하다는 것을 설명했었다.</p>
<p><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);">X <span style="color: rgb(249, 38, 114);">= </span>[<span style="color: rgb(174, 129, 255);">1.</span>, <span style="color: rgb(174, 129, 255);">2.</span>, <span style="color: rgb(174, 129, 255);">3.</span>]<br />Y <span style="color: rgb(249, 38, 114);">= </span>[<span style="color: rgb(174, 129, 255);">1.</span>, <span style="color: rgb(174, 129, 255);">2.</span>, <span style="color: rgb(174, 129, 255);">3.</span>]<br />m <span style="color: rgb(249, 38, 114);">= </span><span style="color: rgb(102, 217, 239);">len</span>(X)<br /><br />W <span style="color: rgb(249, 38, 114);">= </span>tf.placeholder(tf.float32)</pre>
<p>X와 Y 데이터를 1x3 매트릭스로 초기화했고, m은 데이터의 갯수를 뜻한다. 기울기(W)를 바꾸면서 비용을 계산해서 보여주려는 것이 목적이기 때문에 W를 placeholder로 처리했다. 여기서는 y 절편에 해당하는 b는 생략하고 있다. 다음 번 동영상에서 절편 b를 처리하는 쉬운 방법을 배운다. 여기서는 생략했고, 결과를 명확하게 보여주기 위한 것이라고 생각하자.</p>
<p><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);">hypothesis <span style="color: rgb(249, 38, 114);">= </span>tf.mul(W, X)<br />cost <span style="color: rgb(249, 38, 114);">= </span>tf.reduce_sum(tf.pow(hypothesis<span style="color: rgb(249, 38, 114);">-</span>Y, <span style="color: rgb(174, 129, 255);">2</span>)) <span style="color: rgb(249, 38, 114);">/ </span>m</pre>
<p>H(x) = Wx 로 식을 간단하게 정리했으므로 hypothesis에서도 b를 더하는 코드는 보이지 않는다. cost를 계산하는 코드에서는 square 함수 대신 pow 함수를 사용하고 있다.  square 함수는 제곱을 처리하고, pow 함수는 지수를 처리한다. pow 함수이기 때문에 두 번째 매개변수로 2가 전달되었다. 평균을 구하기 위해 reduce_mean 함수 대신 m으로 직접 나누고 있다.</p>
<p>위의 코드를 이전 코드에서는 아래처럼 처리했었다.</p><div>hypothesis = W * x_data + b<br />cost = tf.reduce_mean(tf.square(hypothesis - y_data))</div><p><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(117, 113, 94);"># 그래프로 표시하기 위해 데이터를 누적할 리스트<br /></span>W_val, cost_val <span style="color: rgb(249, 38, 114);">= </span>[], []<br /><br /><span style="color: rgb(117, 113, 94);"># 0.1 단위로 증가할 수 없어서 -30부터 시작. 그래프에는 -3에서 5까지 표시됨.<br /></span><span style="color: rgb(102, 217, 239); font-style: italic;">for </span>i <span style="color: rgb(102, 217, 239); font-style: italic;">in </span><span style="color: rgb(102, 217, 239);">range</span>(<span style="color: rgb(249, 38, 114);">-</span><span style="color: rgb(174, 129, 255);">30</span>, <span style="color: rgb(174, 129, 255);">51</span>)<span style="color: rgb(249, 38, 114);">:<br /></span><span style="color: rgb(249, 38, 114);">    </span>xPos <span style="color: rgb(249, 38, 114);">= </span>i<span style="color: rgb(249, 38, 114);">*</span><span style="color: rgb(174, 129, 255);">0.1                                    </span><span style="color: rgb(117, 113, 94);"># x 좌표. -3에서 5까지 0.1씩 증가<br /></span><span style="color: rgb(117, 113, 94);">    </span>yPos <span style="color: rgb(249, 38, 114);">= </span>sess.run(cost, <span style="color: rgb(102, 0, 153);">feed_dict</span><span style="color: rgb(249, 38, 114);">=</span>{W<span style="color: rgb(249, 38, 114);">: </span>xPos})      <span style="color: rgb(117, 113, 94);"># x 좌표에 따른 y 값<br /></span><span style="color: rgb(117, 113, 94);"><br /></span><span style="color: rgb(117, 113, 94);">    </span><span style="color: rgb(102, 217, 239);">print</span>(<span style="color: rgb(0, 128, 128); font-weight: bold;">'{:3.1f}, {:3.1f}'</span>.format(xPos, yPos))<br /><br />    <span style="color: rgb(117, 113, 94);"># 그래프에 표시할 데이터 누적. 단순히 리스트에 갯수를 늘려나감<br /></span><span style="color: rgb(117, 113, 94);">    </span>W_val.append(xPos)<br />    cost_val.append(yPos)<br /></pre>
<p>그래프에 출력하기 위해서 W_val과 cost_val 변수를 리스트로 만들었다. 81번의 호출 결과를 저장해야 하니까. 원본 코드에서는 50인데, 나는 51을 사용해서 왼쪽과 오른쪽의 균형을 맞추었다.</p>
<p>원본에는 중복되는 코드가 있어서 여기서는 xPos와 yPos로 대체했다. 코드는 몇 줄 길어졌다.</p>
<p><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(102, 217, 239); font-style: italic;">import </span>matplotlib.pyplot <span style="color: rgb(102, 217, 239); font-style: italic;">as </span>plt<br /><br />plt.plot(W_val, cost_val, <span style="color: rgb(0, 128, 128); font-weight: bold;">'ro'</span>)<br />plt.ylabel(<span style="color: rgb(0, 128, 128); font-weight: bold;">'Cost'</span>)<br />plt.xlabel(<span style="color: rgb(0, 128, 128); font-weight: bold;">'W'</span>)<br />plt.show()<br /></pre>
<p>matplotlib 모듈은 파이썬에서 가장 많이 사용하는 그래프 출력 모듈이다. 빨강 점이 찍힌 &nbsp;밥그릇 그래프가 여기서 출력됐다.</p>
<p>plot 함수의 첫 번째는 x축 데이터, 두 번째는 y축 데이터, 세 번째는 그래프 타입. r은 빨강의 red, o는 동그라미를 의미한다. o 대신 x를 사용하면 x 표시로 바뀐다.&nbsp; 그래프는 show 함수를 호출하기 전까지는 출력되지 않는다.</p>
<p><br /></p>
<p># --------------------------------------------------------------------- #</p>
<p><br /></p>
<p>이번 소스코드는 placeholder를 사용하는 것과 동시에 앞의 글에서 설명했던 현재 cost에 대한 미분 결과를 어떻게 계산하는지 보여준다. 여기서 한발 더 나아가서 텐서플로우가 계산한 값과 직접 계산한 값이 똑같다는 것까지 보여준다.</p>
<p>음.. 이번 코드는 동영상과 많은 부분에서 다르다. 동영상에서는 수동으로 계산해도 최소 비용을 잘 찾는다는 것을 보여주는 반면, 여기서는 앞에 설명한 내용들을 보여준다.<br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br />x_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">3.</span>, <span style="color:#ae81ff;">4.</span>]<br />y_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">3.</span>, <span style="color:#ae81ff;">5.</span>, <span style="color:#ae81ff;">7.</span>]           <span style="color:#75715e;"># x와 y의 관계가 모호하다. cost가 내려가지 않는 것이 맞을 수도 있다.<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># 동영상에 나온 데이터셋. 40번째 위치에서 best fit을 찾는다. 이번에는 사용하지 않음.<br /></span><span style="color:#75715e;"># x_data = [1., 2., 3.]<br /></span><span style="color:#75715e;"># y_data = [1., 2., 3.]<br /></span><span style="color:#75715e;"><br /></span>W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">10000.</span>, <span style="color:#ae81ff;">10000.</span>))        <span style="color:#75715e;"># tensor 객체 반환<br /></span><span style="color:#75715e;"><br /></span>X <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)      <span style="color:#75715e;"># 반복문에서 x_data, y_data로 치환됨<br /></span>Y <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)<br /><br />hypothesis <span style="color:#f92672;">= </span>W <span style="color:#f92672;">* </span>X<br />cost <span style="color:#f92672;">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color:#f92672;">- </span>Y))<br /><br /><span style="color:#75715e;"># 동영상에서 미분을 적용해서 구한 새로운 공식. cost를 계산하는 공식<br /></span>mean    <span style="color:#f92672;">= </span>tf.reduce_mean(tf.mul(tf.mul(W, X) <span style="color:#f92672;">- </span>Y, X))   <span style="color:#75715e;"># 변경된 W가 mean에도 영향을 준다<br /></span>descent <span style="color:#f92672;">= </span>W <span style="color:#f92672;">- </span>tf.mul(<span style="color:#ae81ff;">0.01</span>, mean)<br /><span style="color:#75715e;"># W 업데이트. tf.assign(W, descent). 호출할 때마다 변경된 W의 값이 반영되기 때문에 업데이트된다.<br /></span>update  <span style="color:#f92672;">= </span>W.assign(descent)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">50</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>uResult <span style="color:#f92672;">= </span>sess.run(update, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data})    <span style="color:#75715e;"># 이 코드를 호출하지 않으면 W가 바뀌지 않는다.<br /></span><span style="color:#75715e;">    </span>cResult <span style="color:#f92672;">= </span>sess.run(  cost, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data})    <span style="color:#75715e;"># update에서 바꾼 W가 영향을 주기 때문에 같은 값이 나온다.<br /></span><span style="color:#75715e;">    </span>wResult <span style="color:#f92672;">= </span>sess.run(W)<br />    mResult <span style="color:#f92672;">= </span>sess.run(mean, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data})<br /><br />    <span style="color:#75715e;"># 결과가 오른쪽과 왼쪽 경사를 번갈아 이동하면서 내려온다. 기존에 한 쪽 경계만 타고 내려오는 것과 차이가 있다.<br /></span><span style="color:#75715e;">    # 최종적으로 오른쪽과 왼쪽 경사의 중앙에서 최소 비용을 얻게 된다. (생성된 난수값에 따라 한쪽 경사만 타기도 한다.)<br /></span><span style="color:#75715e;">    # descent 계산에서 0.1 대신 0.01을 사용하면 오른쪽 경사만 타고 내려오는 것을 확인할 수 있다. 결국 step이 너무 커서 발생한 현상<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'{} {} {} [{}, {}]'</span>.format(step, mResult, cResult, wResult, uResult))<br /><br /><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'-'</span><span style="color:#f92672;">*</span><span style="color:#ae81ff;">50</span>)<br /><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'[] 안에 들어간 2개의 결과가 동일하다. 즉, update와 cost 계산값이 동일하다.'</span>)<br /><br /><span style="color:#66d9ef;">print</span>(sess.run(hypothesis, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span><span style="color:#ae81ff;">5.0</span>}))<br /><span style="color:#66d9ef;">print</span>(sess.run(hypothesis, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span><span style="color:#ae81ff;">2.5</span>}))

sess.close()</pre><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;">[출력 결과]
...<br /><span style="color: rgb(255, 255, 255);">45 952.0852661132812 120862.359375 </span><span style="color: rgb(255, 255, 255);">[[ </span><span style="color: rgb(255, 255, 255);">128.6113739</span><span style="color: rgb(255, 255, 255);">], [ </span><span style="color: rgb(255, 255, 255);">128.6113739</span><span style="color: rgb(255, 255, 255);">]]</span><br /><span style="color: rgb(255, 255, 255);">46 880.678955078125 103412.8828125 </span><span style="color: rgb(255, 255, 255);">[[ </span><span style="color: rgb(255, 255, 255);">119.09052277</span><span style="color: rgb(255, 255, 255);">], [ </span><span style="color: rgb(255, 255, 255);">119.09052277</span><span style="color: rgb(255, 255, 255);">]]</span><br /><span style="color: rgb(255, 255, 255);">47 814.6279907226562 88482.671875 </span><span style="color: rgb(255, 255, 255);">[[ </span><span style="color: rgb(255, 255, 255);">110.28373718</span><span style="color: rgb(255, 255, 255);">], [ </span><span style="color: rgb(255, 255, 255);">110.28373718</span><span style="color: rgb(255, 255, 255);">]]</span><br /><span style="color: rgb(255, 255, 255);">48 753.5309448242188 75708.015625 </span><span style="color: rgb(255, 255, 255);">[[ </span><span style="color: rgb(255, 255, 255);">102.1374588</span><span style="color: rgb(255, 255, 255);">], [ </span><span style="color: rgb(255, 255, 255);">102.1374588</span><span style="color: rgb(255, 255, 255);">]]</span><br /><span style="color: rgb(255, 255, 255);">49 697.01611328125 64777.6953125 </span><span style="color: rgb(255, 255, 255);">[[ </span><span style="color: rgb(255, 255, 255);">94.60214996</span><span style="color: rgb(255, 255, 255);">], [ </span><span style="color: rgb(255, 255, 255);">94.60214996</span><span style="color: rgb(255, 255, 255);">]]</span><br /><span style="color:#f92672;"><span style="color: rgb(255, 255, 255);">--------------------------------------------------</span><br /></span><span style="color: rgb(255, 255, 255);">[] 안에 들어간 </span><span style="color: rgb(255, 255, 255);">2</span><span style="color: rgb(255, 255, 255);">개의 결과가 동일하다. 즉, update와 cost 계산값이 동일하다.</span><br /><span style="color: rgb(255, 255, 255);">[ </span><span style="color: rgb(255, 255, 255);">473.01074219</span><span style="color: rgb(255, 255, 255);">]</span><br /><span style="color: rgb(255, 255, 255);">[ </span><span style="color: rgb(255, 255, 255);">236.50537109</span><span style="color: rgb(255, 255, 255);">]</span><br /></pre>
<p>최종 결과만 확인해 보자. 오른쪽 끝에 있는 두 개의 열을 보면 된다. 여기서는 기울기(W)가 1에 수렴하지 않는다. [1, 2, 3, 4]와 [1, 3, 5, 7]은 모든 좌표를 지나는 직선이 없기 때문이다. 더욱이 50번 돌려서는 제대로 된 결과 또한 기대할 수 없다는 것을 보여준다.</p>
<p>이렇게 얻은 잘못된 기울기(W)에 대해 궁금증(5, 2.5)을 적용하면 말도 안되는 473과 236이 나오는 것은 당연하다. 얼마나 반복해야 적절한 기울기가 됐다는 것을 알 수 있을까? 정답은 충분히 반복해야 한다는 모호함 정도.</p>
<p>이번 코드는 해석이 어렵다. 일단 GradientDescentOptimizer 함수를 호출하지 않고 있다. update 계산을 통해 얻은 W를 cost에 전달하고 있다. 그럼에도 불구하고 cost는 정상적으로 최저점을 찾아서 진행한다. 이 말은 update 계산에 포함된 공식이 올바르게 GradientDescentOptimizer 함수의 역할을 하고 있다는 뜻이 된다. 즉, GradientDescentOptimizer 함수 없이 직접 만들어서 구동할 수도 있다는 것을 보여주는 예제이다.</p>

<p><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);">mean    <span style="color: rgb(249, 38, 114);">= </span>tf.reduce_mean(tf.mul(tf.mul(W, X) <span style="color: rgb(249, 38, 114);">- </span>Y, X))   <span style="color: rgb(117, 113, 94);"># 변경된 W가 mean에도 영향을 준다<br /></span>descent <span style="color: rgb(249, 38, 114);">= </span>W <span style="color: rgb(249, 38, 114);">- </span>tf.mul(<span style="color: rgb(174, 129, 255);">0.01</span>, mean)<br /></pre><p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:338px;;height:auto;max-width:100%"><img src="http://cfile28.uf.tistory.com/image/221E7D3F579206801AED42" style="max-width:100%;height:auto" width="338" height="73" filename="lab_03_02.png" filemime="image/jpeg"/></span></p>
<p>코드와 공식을 함께 보자.</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W(x) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;--&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; tf.mul(W, X)<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; W(x)&nbsp;<span style="color: rgb(241, 95, 95);">- y</span>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; --&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;tf.mul(W, X)&nbsp;<font color="#f15f5f"><span style="color: rgb(241, 95, 95);">- Y</span><br /></font>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(241, 95, 95);">(</span>W(x) - y<span style="color: rgb(241, 95, 95);">)</span>&nbsp;<span style="color: rgb(241, 95, 95);">* x</span>&nbsp;&nbsp;&nbsp;--&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style="color: rgb(241, 95, 95);">tf.mul(</span>tf.mul(W, X) - Y,&nbsp;<span style="color: rgb(241, 95, 95);">X)<br /></span><span style="box-sizing: border-box; line-height: 18px; font-size: 13.3333px; text-align: justify; font-family: &quot;Apple SD Gothic Neo&quot;;">&nbsp; &nbsp;<span style="color: rgb(241, 95, 95);">1/m *&nbsp;∑</span></span><span style="color: rgb(241, 95, 95);">(</span>W(x) - y) * x<span style="color: rgb(241, 95, 95);">)</span>&nbsp;&nbsp;--&gt; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(241, 95, 95);">tf.reduce_mean(</span>tf.mul(tf.mul(W, X) - Y, X)<span style="color: rgb(241, 95, 95);">)</span><br /><span style="font-family: &quot;Apple SD Gothic Neo&quot;; box-sizing: border-box;"><span style="font-family: &quot;맑은 고딕&quot;, sans-serif; color: rgb(241, 95, 95);">α(</span><span style="font-size: 13.3333px; line-height: 18px;">1/m *&nbsp;∑</span></span>(W(x) - y) * x<span style="color: rgb(241, 95, 95);">)</span>&nbsp;&nbsp;--&gt;&nbsp;<span style="color: rgb(241, 95, 95);">tf.mul(0.01</span>, tf.reduce_mean(tf.mul(tf.mul(W, X) - Y, X))<span style="color: rgb(241, 95, 95);">)</span></p>
<p>복잡하기는 하지만, 하나씩 순서대로 확장해 가니 조금 쉬워 보인다.  혹시 브라우저에 따라 수직으로 줄을 맞춘 부분이 어긋날 수도 있을 것 같다. 맥 크롬에서는 얼추 맞았다.</p><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-11-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-11-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=11" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/13" >07. multi-variable linear regression (lec 04)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.25</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/12" >06. cost 함수를 파이썬만으로 직접 구현</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/11"  class ="current" >05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/10" >04. Linear Regression의 cost 최소화 알고리즘의 원리 설명 (lec 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/9" >03. Tensorflow로 간단한 linear regression 구현 (lab 02)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/8" >01. TensorFlow의 설치 및 기본적인 operations (lab 01)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "11"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/11"]);
_tiq.push(["__setParam", "date", "2016-07-22 20:49:32"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "25469"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_11", 
"c_title":"파이쿵 :: 05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-07-22 20:49:32", 
"plink":"http://pythonkim.tistory.com/11", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
