<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 03. Tensorflow로 간단한 linear regression 구현 (lab 02)</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="김성훈 교수님의 lab 두 번째 동영상에 대해서 풀어본다.  이론을 설명하는 동영상에 등장했던 공식이 처음에 나온다. hypothesis와 cost 함수를 구현하는데 필요한 공식이고, 아래 코드에서 이들 공식을 텐서플로우로 구현하고 있다. import tensorflow as tf x_data = [1., 2., 3.] y_data = [1., 2., 3.] # try to find values for w and b that compute y_data = W * x_data + b W = tf.Variable(tf.random_uniform([1], -1..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/9" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/9" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="03. Tensorflow로 간단한 linear regression 구현 (lab 02)" ><meta name="by" content="사과쿵" ><meta property="og:description" content="김성훈 교수님의 lab 두 번째 동영상에 대해서 풀어본다.  이론을 설명하는 동영상에 등장했던 공식이 처음에 나온다. hypothesis와 cost 함수를 구현하는데 필요한 공식이고, 아래 코드에서 이들 공식을 텐서플로우로 구현하고 있다. import tensorflow as tf x_data = [1., 2., 3.] y_data = [1., 2., 3.] # try to find values for w and b that compute y_data = W * x_data + b W = tf.Variable(tf.random_uniform([1], -1.." ><meta property="og:image" content="http://cfile6.uf.tistory.com/image/2622D63A5791885A18644A" ><meta property="article:section" content="과학" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="03. Tensorflow로 간단한 linear regression 구현 (lab 02)" ><meta name="twitter:description" content="김성훈 교수님의 lab 두 번째 동영상에 대해서 풀어본다.  이론을 설명하는 동영상에 등장했던 공식이 처음에 나온다. hypothesis와 cost 함수를 구현하는데 필요한 공식이고, 아래 코드에서 이들 공식을 텐서플로우로 구현하고 있다. import tensorflow as tf x_data = [1., 2., 3.] y_data = [1., 2., 3.] # try to find values for w and b that compute y_data = W * x_data + b W = tf.Variable(tf.random_uniform([1], -1.." ><meta property="twitter:image" content="http://cfile6.uf.tistory.com/image/2622D63A5791885A18644A" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/9" ><meta name="plink" content="http://pythonkim.tistory.com/9" ><meta name="title" content="03. Tensorflow로 간단한 linear regression 구현 (lab 02)" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/9" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/9" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/9" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/9" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_9" /><meta property="article:published_time" content="2016-07-22T11:48:08+09:00" ><meta property="og:regDate" content="20160722114808" ><meta property="article:modified_time" content="2017-01-11T12:05:34+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/9"},"url":"http://pythonkim.tistory.com/9","headline":"03. Tensorflow로 간단한 linear regression 구현 (lab 02)","description":"김성훈 교수님의 lab 두 번째 동영상에 대해서 풀어본다.  이론을 설명하는 동영상에 등장했던 공식이 처음에 나온다. hypothesis와 cost 함수를 구현하는데 필요한 공식이고, 아래 코드에서 이들 공식을 텐서플로우로 구현하고 있다. import tensorflow as tf x_data = [1., 2., 3.] y_data = [1., 2., 3.] # try to find values for w and b that compute y_data = W * x_data + b W = tf.Variable(tf.random_uniform([1], -1..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile6.uf.tistory.com/image/2622D63A5791885A18644A","width":"800px","height":"800px"},"datePublished":"20160722T11:48:08+09:00","dateModified":"20170111T12:05:34+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/10","NEXT_PAGE":"\/8","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F9","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>03. Tensorflow로 간단한 linear regression 구현 (lab 02)</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.07.22 11:48</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<div><p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:690px;;height:auto;max-width:100%"><img src="http://cfile30.uf.tistory.com/image/232CE23A579E32A42A8629" style="max-width:100%;height:auto" width="690" height="325" filename="lab_02_00.png" filemime="image/jpeg"/></span></p><p>김성훈 교수님의 lab 두 번째 동영상에 대해서 풀어본다.</p></div>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:580px;;height:auto;max-width:100%"><img src="http://cfile6.uf.tistory.com/image/2622D63A5791885A18644A" style="max-width:100%;height:auto" width="580" height="306" filename="lab_02_01.png" filemime="image/jpeg"/></span></p><p>이론을 설명하는 동영상에 등장했던 공식이 처음에 나온다. hypothesis와 cost 함수를 구현하는데 필요한 공식이고, 아래 코드에서 이들 공식을 텐서플로우로 구현하고 있다.</p><p style="text-align: left; clear: none; float: none;"><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br />x_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">3.</span>]<br />y_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">3.</span>]<br /><br /><span style="color:#75715e;"># try to find values for w and b that compute y_data = W * x_data + b<br /></span>W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br />b <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br /><span style="color:#75715e;"># my hypothesis<br /></span>hypothesis <span style="color:#f92672;">= </span>W <span style="color:#f92672;">* </span>x_data <span style="color:#f92672;">+ </span>b<br /><br /><span style="color:#75715e;"># Simplified cost function<br /></span>cost <span style="color:#f92672;">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color:#f92672;">- </span>y_data))<br /><br /><span style="color:#75715e;"># minimize<br /></span>rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)  <span style="color:#75715e;"># learning rate, alpha<br /></span>optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br /><span style="color:#75715e;"># before starting, initialize the variables. We will 'run' this first.<br /></span>init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br /><span style="color:#75715e;"># launch the graph<br /></span>sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#75715e;"># fit the line<br /></span><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">2001</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>sess.run(train)<br />    <span style="color:#66d9ef;font-style:italic;">if </span>step <span style="color:#f92672;">% </span><span style="color:#ae81ff;">20 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'{:4} {} {} {}'</span>.format(step, sess.run(cost), sess.run(W), sess.run(b)))<br /><br /><span style="color:#75715e;"># learns best fit is W: [1] b: [0]<br /></span></pre>
<pre style="background-color: rgb(39, 40, 34);"><font color="#75715e" face="Menlo"><span style="font-size: 12px; color: rgb(255, 255, 255);">[출력 결과]
...
1920 0.0 [ 1.] [  5.25413171e-08]
1940 0.0 [ 1.] [  5.25413171e-08]
1960 0.0 [ 1.] [  5.25413171e-08]
1980 0.0 [ 1.] [  5.25413171e-08]
2000 0.0 [ 1.] [  5.25413171e-08]</span></font><span style="color: rgb(255, 255, 255); font-family: Menlo; font-size: 9pt;">
</span></pre>
<div>동영상에 나왔던 코드를 3.x 버전으로만 수정했고, 어떤 주석도 추가하지 않았다. 출력 결과를 보면 best fit에 해당하는 W는 1.으로, b는 5.25413171e-08으로 표시됐다. 마지막에 똑같은 결과가 계속해서 나오는 이유는 두 번째 열에 출력된 cost가 0.0이 되어서 더 이상 비용을 줄일 수 없기 때문에 계산이 필요 없어서이다.</div>
<div><br /></div>
<pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);">x_data <span style="color: rgb(249, 38, 114);">= </span>[<span style="color: rgb(174, 129, 255);">1.</span>, <span style="color: rgb(174, 129, 255);">2.</span>, <span style="color: rgb(174, 129, 255);">3.</span>]<br />y_data <span style="color: rgb(249, 38, 114);">= </span>[<span style="color: rgb(174, 129, 255);">1.</span>, <span style="color: rgb(174, 129, 255);">2.</span>, <span style="color: rgb(174, 129, 255);">3.</span>]<br /></pre>
<p>x와 y 데이터가 모두 1행 3열의 리스트이다. 2차원 좌표로 표현하면 (1,1), (2,2), (3,3)이 되고, 원점에서 시작하는 y = x라는 직선을 그릴 수 있다. x와 y의 갯수가 다르다는 것은 있을 수 없다. 2차원 좌표로 표현해야 되니까.</p><p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># try to find values for w and b that compute y_data = W * x_data + b<br /></span>W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br />b <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br /><span style="color:#75715e;"># 함수 프로토타입<br /></span><span style="color:#75715e;"># tf.random_uniform(shape, minval=0, maxval=None, dtype=tf.float32, seed=None, name=None)<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># print(tf.random_uniform([1], 0, 32))<br /></span><span style="color:#75715e;"># 결과 : Tensor("random_uniform_2:0", shape=(1,), dtype=float32)<br /></span></pre>
<p style="text-align: left; clear: none; float: none;">cost 함수에서 궁극적으로 찾고자 하는 기울기(W)와 y 절편(b)의 초기값을 설정한다.</p><p style="text-align: left; clear: none; float: none;">tf.random_uniform 함수는 정규분포 난수를 생성하는 함수로,&nbsp;배열의 shape, 최소값, 최대값을 파라미터로 사용한다. 여기서는 [1], -1.0, 1.0을 전달했기 때문에 -1에서 1 사이의 난수를 1개 만든다. 결과는 1행 1열의 행렬이 된다. 나중에 여러 개의 데이터를 생성하는 코드가 나오는데, 5개일 경우 첫 번째 파라미터로 [5]라고 전달하면 된다.</p><p style="text-align: left; clear: none; float: none;">여기서 난수를 사용하는 중요한 의도가 있다. 최저 비용을 스스로 찾아가야 하는데, 시작 위치가 매번 달라짐에도 불구하고 항상 최저 비용을 찾는다는 것을 보여주기 위해서. 머신러닝은 초기값으로 무엇이 주어지건, 비용이 줄어드는 방향으로 스스로 진행하는 놀라운 능력을 갖고 있다.</p><p style="text-align: left; clear: none; float: none;">정확하게 위의 사실을 확인하고 싶다면, 난수 대신 상수를 전달해도 된다. 나는 각각 5, 15, 115의 세 번에 걸쳐 검사했고, 정상적으로 동작함을 확인했다.</p><p>W = tf.Variable(115.) &nbsp; &nbsp; # 5, 15, 115로 테스트<br />b = tf.Variable(115.)</p><p style="clear: none; float: none;"><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># 실수 대신 정수 데이터를 사용하기 위해서는 데이터와 변수를 함께 바꾸어야 한다.<br /></span><span style="color:#75715e;"># 그럼에도 여전히 난수의 내부 타입은 float32를 사용해야 한다. int32 등의 자료형은 에러.<br /></span>x_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">3</span>]<br />y_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">3</span>]<br /><br /><span style="color:#75715e;"># 정수 생성의 경우 2**n 규칙을 따르는 것이 좋다. 구글 문서.<br /></span>W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">32</span>, <span style="color:#660099;">dtype</span><span style="color:#f92672;">=</span>tf.float32))<br />b <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">32</span>))<br /></pre><p style="clear: none; float: none;">지금까지 설명했던 코드를 바로 위의 코드처럼 바꿀 수 있다.&nbsp;</p><div><br /></div><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(117, 113, 94);"># my hypothesis<br /></span>hypothesis <span style="color: rgb(249, 38, 114);">= </span>W <span style="color: rgb(249, 38, 114);">* </span>x_data <span style="color: rgb(249, 38, 114);">+ </span>b<br /></pre><p style="text-align: left; clear: none; float: none;">H(x) = Wx + b라는 공식을 충실하게 구현한 코드.<br />먼저 W와 x_data를 곱한 결과는 무엇일까? int 또는 float으로 표현할 수 있는 1개의 값일까? 땡!</p><p>데이터를 다루는 곳에서는 이것을 벡터(vector) 연산이라고 부른다.  W는 1x1, x_data는 1x3 행렬이기 때문에, 행렬 연산에 따라 결과는 1x3의 행렬이 나온다. 이해가 안 가면 행렬의 곱셈을 구글링 해보기 바란다. 여기에 b를 더하면 b는 1회 더해지는 것일까? 땡! 행렬과 행렬이 아닌 값을 더하거나 곱할 때는 행렬의 모든 요소에 영향을 주기 때문에&nbsp;덧셈 또한 3회 발생한다. 그러나, 아직 run 함수를 호출하지 않았기 때문에 계산이 일어난 상태는 아니다.</p><p style="text-align: left; clear: none; float: none;"><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(117, 113, 94);"># Simplified cost function<br /></span>cost <span style="color: rgb(249, 38, 114);">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color: rgb(249, 38, 114);">- </span>y_data))<br /></pre>
<p>기울기(W)와 y 절편(b)에 대한 적합성을 판단하는 정말, 정말, 정말 중요한 코드다. 머신러닝을 좀 한다고 얘기하려면, 텐서플로우 없이 파이썬 만으로 이 코드를 구성할 수 있어야 한다. 스탠포트 대학교의 앤드류 응 교수님 말씀.</p><p>코드가 아니라 공식을 풀어보면,</p><p>1. hypothesis 방정식에서 y 좌표의 값을 빼면, 단순 거리가 나온다.<br /> &nbsp; &nbsp;hypothesis - y_data가 여기에 해당하고 hypothesis와 y_data 모두 1x3 매트릭스. 즉, 행렬(벡터) 연산.</p><p>2. 단순 거리는 음수 또는 양수이기 때문에 제곱을 해서 멀리 있는 데이터에 벌점을 부여한다.<br /> &nbsp; &nbsp;tf.square() - 매트릭스에 포함된 요소에 대해 각각 제곱하는 행렬 연산</p><p>3. 합계에 대해 평균을 계산한다.<br /> &nbsp; &nbsp;tf.reduce_mean() - 합계 코드가 보이지 않아도 평균을 위해 내부적으로 합계 계산. 결과값은 실수 1개.</p><p style="text-align: left; clear: none; float: none;"><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(117, 113, 94);"># minimize<br /></span>rate <span style="color: rgb(249, 38, 114);">= </span>tf.Variable(<span style="color: rgb(174, 129, 255);">0.1</span>)  <span style="color: rgb(117, 113, 94);"># learning rate, alpha<br /></span>optimizer <span style="color: rgb(249, 38, 114);">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color: rgb(249, 38, 114);">= </span>optimizer.minimize(cost)<br /></pre><p style="text-align: left; clear: none; float: none;">learning rate라고 부르는 값이 있는데, 완전, 완전, 완전 중요하다.&nbsp;이 값을 자동으로 알아낼 수는 없고, 여러 번에 걸쳐 테스트하면서 적절한 값을 찾아야 한다. 여기서는 0.1을 사용하고 있다.&nbsp;이때 0.1이 적용되는 대상은 기울기에 해당하는 W이다. 나중에 그래프가 나올 때 확인할 수 있다.</p><p>김성훈 교수님께서 엄청나게 강조하시는 gradient descent 알고리듬을 구현한 코드가 tf.train.GradientDescentOptimizer 함수이다. 단어 뜻 그대로 "경사타고 내려가기"라는 미분을 통해 최저 비용을 향해 진행하도록 만드는 핵심 함수이다. 이때 rate를 전달했기 때문에 매번 0.1 만큼씩 내려가게 된다. W축에 대해서.</p><p>minimize 함수는 글자 그대로 최소 비용을 찾아주는 함수라고 생각하면 된다. 그러나, 정확하게는 gradient descent 알고리듬에서 gradients를 계산해서 변수에 적용하는 일을 동시에 하는 함수다. W와 b를 적절하게 계산해서 변경하는 역할을 하는데, 그 진행 방향이 cost가 작아지는 쪽이라는 뜻이다.</p><p>이 코드에서 정말 중요한 것은 train 텐서에 연결된 것이 정말 많다는 것이다.  optimizer는 직접 연결되었고, optimizer에는 cost와 rate가 연결되었으니까 이들은 한 다리 걸쳐 연결되었고, cost에는 reduce_mean과 square 함수를 통해 (hypothesis - y_data)의 결과가 두 다리 걸쳐 연결되었고, hypothesis는 W, x_data, b와 연결되었으므로 세 다리 걸쳐 연결된 상태라는 것이다. 그래서, train을 구한다는 것은 이 모든 연결된 객체들을 계산한다는 것과 같은 뜻이 된다.</p><p style="text-align: left; clear: none; float: none;"><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(117, 113, 94);"># before starting, initialize the variables. We will 'run' this first.<br /></span>init <span style="color: rgb(249, 38, 114);">= </span>tf.initialize_all_variables()<br /><br /><span style="color: rgb(117, 113, 94);"># launch the graph<br /></span>sess <span style="color: rgb(249, 38, 114);">= </span>tf.Session()<br />sess.run(init)<br /></pre><p style="text-align: left; clear: none; float: none;">텐서플로우를 구동하기 위해서는 그래프에 연결된 모든 변수를 초기화해야 한다. 이 코드는 run 함수를 호출하기 전에 나와야 한다.&nbsp;tf.initialize_all_variables()는&nbsp;initialize_variables(all_variables())의 축약된 표현으로&nbsp;전달된 변수들을 초기화하는 연산(op)을 반환하는 함수로, 여기서는 init 변수가 초기화 operations에 해당한다.&nbsp;세션을 만들고, 앞에서 초기화한 변수들을 run 함수에 넣고 구동했다. init에 포함된 모든 텐서를 평가한다. (0.12버전에서 initialize_all_variables 함수 대신&nbsp;global_variables_initializer 함수로 바뀌었다.)</p><p style="text-align: left; clear: none; float: none;"><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);"><span style="color: rgb(117, 113, 94);"># fit the line<br /></span><span style="color: rgb(102, 217, 239); font-style: italic;">for </span>step <span style="color: rgb(102, 217, 239); font-style: italic;">in </span><span style="color: rgb(102, 217, 239);">range</span>(<span style="color: rgb(174, 129, 255);">2001</span>)<span style="color: rgb(249, 38, 114);">:<br /></span><span style="color: rgb(249, 38, 114);">    </span>sess.run(train)<br />    <span style="color: rgb(102, 217, 239); font-style: italic;">if </span>step <span style="color: rgb(249, 38, 114);">% </span><span style="color: rgb(174, 129, 255);">20 </span><span style="color: rgb(249, 38, 114);">== </span><span style="color: rgb(174, 129, 255);">0</span><span style="color: rgb(249, 38, 114);">:<br /></span><span style="color: rgb(249, 38, 114);">        </span><span style="color: rgb(102, 217, 239);">print</span>(<span style="color: rgb(0, 128, 128); font-weight: bold;">'{:4} {} {} {}'</span>.format(step, sess.run(cost), sess.run(W), sess.run(b)))<br /></pre><p>range 함수는 매개변수가 생략될 경우 0부터 시작하고 2001은 포함하지 않으므로, 0에서 2000까지 2001번 반복하는 코드이다.&nbsp;출력이 너무 많이 발생하는 관계로 20번에 한 번씩만 출력하도록 조절하고 있다.<br /></p><p>반복문 바로 밑에서 sess.run(train) 함수를 호출해서, 앞서 설명한 모든 관련된 텐서들을 계산한다. 이렇게 계산한 결과는 print 함수를 통해 화면에 출력한다. 이미 계산된 결과임에도 불구하고 run 함수를 통해 확인해야 하는 것은 불편한 일일 뿐더러 다시 한번 run 함수를 호출해야 하므로 성능저하의 원인처럼 보여질 수도 있다. 여기서는 진행 결과를 보여줘야 하기 때문에 호출하는 것이고, 출력 횟수 자체를 100 또는 1000으로 지정하면 추가 계산을 최소한으로 유지할 수 있기 때문에 성능저하라고 볼 수는 없다. 특히, 이 부분은 학습을 하는 과정이기 때문에 모델을 구축한 이후에는 예측(prediction)에 관여하지 않기 때문에 문제가 되지 않는다. 참.. W와 b는 학습 과정에서 전혀 출력할 이유가 없고, cost가 줄어드는 것만으로 충분하다.</p><p><br /></p><p>동영상에서 두 번째로 소개된 placeholder를 사용한 버전의 코드다.</p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br />x_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">3.</span>, <span style="color:#ae81ff;">4.</span>]<br />y_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">4.</span>, <span style="color:#ae81ff;">6.</span>, <span style="color:#ae81ff;">8.</span>]<br /><br /><span style="color:#75715e;"># range is -100 ~ 100<br /></span>W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">100.</span>, <span style="color:#ae81ff;">100.</span>))<br />b <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">100.</span>, <span style="color:#ae81ff;">100.</span>))<br /><br /><span style="color: rgb(242, 150, 97);">X </span><span style="color: rgb(242, 150, 97);">= </span><span style="color: rgb(242, 150, 97);">tf.placeholder(tf.float32)</span><br /><span style="color: rgb(242, 150, 97);">Y </span><span style="color: rgb(242, 150, 97);">= </span><span style="color: rgb(242, 150, 97);">tf.placeholder(tf.float32)</span><br /><br /><span style="color: rgb(242, 150, 97);">hypothesis </span><span style="color: rgb(242, 150, 97);">= </span><span style="color: rgb(242, 150, 97);">W </span><span style="color: rgb(242, 150, 97);">* </span><span style="color: rgb(242, 150, 97);">X </span><span style="color: rgb(242, 150, 97);">+ </span><span style="color: rgb(242, 150, 97);">b</span><br /><br /><span style="color: rgb(242, 150, 97);">cost </span><span style="color: rgb(242, 150, 97);">= </span><span style="color: rgb(242, 150, 97);">tf.reduce_mean(tf.square(hypothesis </span><span style="color: rgb(242, 150, 97);">- </span><span style="color: rgb(242, 150, 97);">Y))</span><br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)<br />optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">2001</span>)<span style="color:#f92672;">:<br /></span><span style="color: rgb(242, 150, 97);">    </span><span style="color: rgb(242, 150, 97);">sess.run(train, </span><span style="color: rgb(242, 150, 97);">feed_dict</span><span style="color: rgb(242, 150, 97);">=</span><span style="color: rgb(242, 150, 97);">{X</span><span style="color: rgb(242, 150, 97);">: </span><span style="color: rgb(242, 150, 97);">x_data, Y</span><span style="color: rgb(242, 150, 97);">: </span><span style="color: rgb(242, 150, 97);">y_data})</span><br />    <span style="color:#66d9ef;font-style:italic;">if </span>step <span style="color:#f92672;">% </span><span style="color:#ae81ff;">20 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color: rgb(242, 150, 97);">        </span><span style="color: rgb(242, 150, 97);">print</span><span style="color: rgb(242, 150, 97);">(step, sess.run(cost, </span><span style="color: rgb(242, 150, 97);">feed_dict</span><span style="color: rgb(242, 150, 97);">=</span><span style="color: rgb(242, 150, 97);">{X</span><span style="color: rgb(242, 150, 97);">: </span><span style="color: rgb(242, 150, 97);">x_data, Y</span><span style="color: rgb(242, 150, 97);">: </span><span style="color: rgb(242, 150, 97);">y_data}), sess.run(W), sess.run(b))</span><br /><br /><span style="color:#66d9ef;">print</span>(sess.run(hypothesis, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span><span style="color:#ae81ff;">5</span>}))           <span style="color: rgb(117, 113, 94); font-size: 9pt;"># [ 10.]</span><br /><span style="color:#66d9ef;">print</span>(sess.run(hypothesis, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span><span style="color:#ae81ff;">2.5</span>}))         <span style="color: rgb(117, 113, 94); font-size: 9pt;"># [5.]</span><br /><span style="color: rgb(242, 150, 97);">print</span><span style="color: rgb(242, 150, 97);">(sess.run(hypothesis, </span><span style="color: rgb(242, 150, 97);">feed_dict</span><span style="color: rgb(242, 150, 97);">=</span><span style="color: rgb(242, 150, 97);">{X</span><span style="color: rgb(242, 150, 97);">: </span><span style="color: rgb(242, 150, 97);">[</span><span style="color: rgb(242, 150, 97);">2.5</span><span style="color: rgb(242, 150, 97);">, </span><span style="color: rgb(242, 150, 97);">5</span><span style="color: rgb(242, 150, 97);">]}))</span>    <span style="color:#75715e;"># </span><span style="color: rgb(117, 113, 94); font-size: 9pt;">[  5.  10.], </span><span style="color: rgb(117, 113, 94); font-size: 9pt;">원하는 X의 값만큼 전달.</span></pre><p>오렌지 색이 그냥 좋다.<br />오렌지 색으로 표시한 코드가 중요하다. 많이 바꾼 것 같지만, 실제로는 그다지 바뀐게 없다.</p><p>x_data와 y_data를 각가 4개씩으로 하고 y_data의 값이 x_data의 두 배가 되도록 했다.&nbsp; 기울기(W)와 y 절편(b)의 값은 -10에서 10까지의 숫자로 조금 크게 했고, 이들을 받을 hypothesis를 구성했다. hypothesis에서 예전에는 x_data라는 상수 데이터(바뀌지 않기 때문에)를 사용했다면 이제는 언제든지 다른 데이터를 전달할 수 있도록 placeholder X를 사용하고 있다. cost를 계산하는 코드에서도 y_data 대신 placeholder Y를 전달했다.</p><p>for문 안쪽에서 X, Y에 대해 x_data, y_data를 전달하는 코드가 보인다. 여기까지만 보면 X, Y를 만든 이유가 없다. 그러나, for문 바깥에서 X에 새로운 데이터를 넣어서 구동하는 코드가 중요하다. 우리의 목적은 비용을 최소로 만드는 기울기(W)와 y 절편( b)를 구하는 것이었고, 이 값들은 hypothesis에 공식과 함께 저장되어 있다. X를 전달하면 Y를 결과값으로 알려준다. 5나 2.5처럼 한 개를 전달해도 되고 [2.5, 5]처럼 여러 개를 전달해도 된다. 5는 1x1, [2.5, 5]는 1x2&nbsp;크기의 행렬이다.</p><div class="daum_like_wrapper"><iframe class="daum_like_button" id="daum_like_button_9" frameborder="0" scrolling="no" allowTransparency="true" src="http://pythonkim.tistory.com/like/?uid=2072317_9&sc=404%2CblogId_2072317&url=http%3A%2F%2Fpythonkim.tistory.com%2F9&published=1469155688" style="width:100%;height:44px;margin:10px auto"></iframe></div><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-9-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-9-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=9" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/11" >05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/10" >04. Linear Regression의 cost 최소화 알고리즘의 원리 설명 (lec 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/9"  class ="current" >03. Tensorflow로 간단한 linear regression 구현 (lab 02)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/8" >01. TensorFlow의 설치 및 기본적인 operations (lab 01)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/7" >02. Linear Regression의 Hypothesis와 cost 설명 (lec 02)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/6" >00. 머신러닝 입문기</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 03. Tensorflow로 간단한 linear regression 구현 (lab 02)"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "9"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/9"]);
_tiq.push(["__setParam", "date", "2016-07-22 11:48:08"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "25835"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__setParam", "like_ex", "{'serviceId': 'tistory', 'uniqueId': '2072317_9', 'serviceCategories': '404,blogId_2072317'}"]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_9", 
"c_title":"파이쿵 :: 03. Tensorflow로 간단한 linear regression 구현 (lab 02)", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-07-22 11:48:08", 
"plink":"http://pythonkim.tistory.com/9", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
