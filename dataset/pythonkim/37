<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="Neural Network 코드를 작성해 볼 시간이다.  logistic regression을 사용해서 실행시킨 결과이다. 그림에 있는 것처럼 XOR 문제를 logistic regression으로 푸는 것은 불가능하다. Accuracy에 0.5라고 출력됐으니까, 50%의 정확도라는 뜻이다. 앤드류 교수님 수업에도 자주 나오는데, 여러 개의 logistic regression을 연결하지 않고, 단 한 개만으로 XOR 문제를 풀 수 없다고 말씀하셨다. 아래 코드에서 사용할 파일  import..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/37" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/37" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)" ><meta name="by" content="사과쿵" ><meta property="og:description" content="Neural Network 코드를 작성해 볼 시간이다.  logistic regression을 사용해서 실행시킨 결과이다. 그림에 있는 것처럼 XOR 문제를 logistic regression으로 푸는 것은 불가능하다. Accuracy에 0.5라고 출력됐으니까, 50%의 정확도라는 뜻이다. 앤드류 교수님 수업에도 자주 나오는데, 여러 개의 logistic regression을 연결하지 않고, 단 한 개만으로 XOR 문제를 풀 수 없다고 말씀하셨다. 아래 코드에서 사용할 파일  import.." ><meta property="og:image" content="http://cfile23.uf.tistory.com/image/24701E44579ED90B23AA8D" ><meta property="article:section" content="과학" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)" ><meta name="twitter:description" content="Neural Network 코드를 작성해 볼 시간이다.  logistic regression을 사용해서 실행시킨 결과이다. 그림에 있는 것처럼 XOR 문제를 logistic regression으로 푸는 것은 불가능하다. Accuracy에 0.5라고 출력됐으니까, 50%의 정확도라는 뜻이다. 앤드류 교수님 수업에도 자주 나오는데, 여러 개의 logistic regression을 연결하지 않고, 단 한 개만으로 XOR 문제를 풀 수 없다고 말씀하셨다. 아래 코드에서 사용할 파일  import.." ><meta property="twitter:image" content="http://cfile23.uf.tistory.com/image/24701E44579ED90B23AA8D" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/37" ><meta name="plink" content="http://pythonkim.tistory.com/37" ><meta name="title" content="28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/37" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/37" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/37" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/37" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_37" /><meta property="article:published_time" content="2016-08-01T15:40:43+09:00" ><meta property="og:regDate" content="20160801154043" ><meta property="article:modified_time" content="2016-09-27T20:41:08+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/37"},"url":"http://pythonkim.tistory.com/37","headline":"28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)","description":"Neural Network 코드를 작성해 볼 시간이다.  logistic regression을 사용해서 실행시킨 결과이다. 그림에 있는 것처럼 XOR 문제를 logistic regression으로 푸는 것은 불가능하다. Accuracy에 0.5라고 출력됐으니까, 50%의 정확도라는 뜻이다. 앤드류 교수님 수업에도 자주 나오는데, 여러 개의 logistic regression을 연결하지 않고, 단 한 개만으로 XOR 문제를 풀 수 없다고 말씀하셨다. 아래 코드에서 사용할 파일  import..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile23.uf.tistory.com/image/24701E44579ED90B23AA8D","width":"800px","height":"800px"},"datePublished":"20160801T15:40:43+09:00","dateModified":"20160927T20:41:08+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/38","NEXT_PAGE":"\/36","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F37","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.08.01 15:40</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<p style="text-align: left; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:519px;;height:auto;max-width:100%"><img src="http://cfile23.uf.tistory.com/image/24701E44579ED90B23AA8D" style="max-width:100%;height:auto" width="519" height="254" filename="lab_09_00_1.png" filemime="image/jpeg"/></span></p>
<p><br /></p>
<p>Neural Network 코드를 작성해 볼 시간이다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:753px;;height:auto;max-width:100%"><img src="http://cfile22.uf.tistory.com/image/2366A244579ED90D2CBC8B" style="max-width:100%;height:auto" width="753" height="302" filename="lab_09_02.png" filemime="image/jpeg"/></span></p>
<p>logistic regression을 사용해서 실행시킨 결과이다. 그림에 있는 것처럼 XOR 문제를 logistic regression으로 푸는 것은 불가능하다. Accuracy에 0.5라고 출력됐으니까, 50%의 정확도라는 뜻이다. 앤드류 교수님 수업에도 자주 나오는데, 여러 개의 logistic regression을 연결하지 않고, 단 한 개만으로 XOR 문제를 풀 수 없다고 말씀하셨다.</p>
<p><br /></p>
<p>아래 코드에서 사용할 파일 &nbsp; <span class="imageblock" style="display:inline-block;;height:auto;max-width:100%"><a href="http://pythonkim.tistory.com/attachment/cfile26.uf@2340D04057EA5A99143C18.txt"><img src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/image/extension/txt.gif" alt="" style="vertical-align: middle;" /> 07train.txt</a></span></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><span style="color:#66d9ef;font-style:italic;">import </span>numpy <span style="color:#66d9ef;font-style:italic;">as </span>np<br /><br /><span style="color:#75715e;"># 07train.txt<br /></span><span style="color:#75715e;"># # x1 x2 y<br /></span><span style="color:#75715e;"># 0   0   0<br /></span><span style="color:#75715e;"># 0   1   1<br /></span><span style="color:#75715e;"># 1   0   1<br /></span><span style="color:#75715e;"># 1   1   0<br /></span><span style="color:#75715e;"><br /></span>xy <span style="color:#f92672;">= </span>np.loadtxt(<span style="color:#008080;font-weight:bold;">'07train.txt'</span>, <span style="color:#660099;">unpack</span><span style="color:#f92672;">=</span><span style="color:#66d9ef;font-style:italic;">True</span>)<br /><br />x_data <span style="color:#f92672;">= </span>xy[<span style="color:#f92672;">:-</span><span style="color:#ae81ff;">1</span>]<br />y_data <span style="color:#f92672;">= </span>xy[<span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>]<br /><br />X <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)<br />Y <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)<br /><br />W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>, <span style="color:#66d9ef;">len</span>(x_data)], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br />h <span style="color:#f92672;">= </span>tf.matmul(W, X)<br />hypothesis <span style="color:#f92672;">= </span>tf.div(<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">1. </span><span style="color:#f92672;">+ </span>tf.exp(<span style="color:#f92672;">-</span>h))<br /><br />cost <span style="color:#f92672;">= -</span>tf.reduce_mean(Y <span style="color:#f92672;">* </span>tf.log(hypothesis) <span style="color:#f92672;">+ </span>(<span style="color:#ae81ff;">1 </span><span style="color:#f92672;">- </span>Y) <span style="color:#f92672;">* </span>tf.log(<span style="color:#ae81ff;">1 </span><span style="color:#f92672;">- </span>hypothesis))<br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)<br />optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br /><span style="color:#66d9ef;font-style:italic;">with </span>tf.Session() <span style="color:#66d9ef;font-style:italic;">as </span>sess<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>sess.run(init)<br /><br />    <span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">1000</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span>sess.run(train, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data})<br />        <span style="color:#66d9ef;font-style:italic;">if </span>step <span style="color:#f92672;">% </span><span style="color:#ae81ff;">200 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">            </span><span style="color:#66d9ef;">print</span>(step, sess.run(cost, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data}), sess.run(W))<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'-'</span><span style="color:#f92672;">*</span><span style="color:#ae81ff;">50</span>)<br /><br />    <span style="color:#75715e;"># Test model<br /></span><span style="color:#75715e;">    </span>correct_prediction <span style="color:#f92672;">= </span>tf.equal(tf.floor(hypothesis<span style="color:#f92672;">+</span><span style="color:#ae81ff;">0.5</span>), Y)<br /><br />    <span style="color:#75715e;">#Calculate accuraty<br /></span><span style="color:#75715e;">    </span>accuracy <span style="color:#f92672;">= </span>tf.reduce_mean(tf.cast(correct_prediction, <span style="color:#008080;font-weight:bold;">'float'</span>))<br />    param <span style="color:#f92672;">= </span>[hypothesis, tf.floor(hypothesis<span style="color:#f92672;">+</span><span style="color:#ae81ff;">0.5</span>), correct_prediction, accuracy]<br />    result <span style="color:#f92672;">= </span>sess.run(param, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">:</span>x_data, Y<span style="color:#f92672;">:</span>y_data})<br /><br />    <span style="color:#66d9ef;font-style:italic;">for </span>i <span style="color:#66d9ef;font-style:italic;">in </span>result<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#66d9ef;">print</span>(i)<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'Accuracy :'</span>, accuracy.eval({X<span style="color:#f92672;">:</span>x_data, Y<span style="color:#f92672;">:</span>y_data}))<br /></pre>
<p>소스 코드가 없어서 직접 입력해서 만들었다.</p>
<p>음.. 거짓말. 앞에 나온 logistic regression 코드를 그대로 가져다가 사용했다. 달라진 점은 사용할 데이터 파일과 출력하는 형식 정도. 데이터 파일은 0과 1로 구성된 4개의 행을 갖고 있고, 결과는 XOR에 맞게 0, 1, 1, 0으로 되어 있다. 출력은 한 줄로 너무 길게 나와서 줄 단위로 보여줄 수 있도록 교수님의 코드를 조금 수정했다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color: rgb(255, 255, 255);">[출력 결과]
0 0.722337 [[-0.34294498 -0.4513675 ]]<br />
200 0.693178 [[ 0.0063774  -0.02477646]]<br />400 0.693148 [[ 0.00423667 -0.00465424]]<br />600 0.693147 [[ 0.00126391 -0.0012734 ]]<br />800 0.693147 [[ 0.00036196 -0.00036215]]<br />--------------------------------------------------<br />[[0.5 0.49997401 0.50002599 0.5]]     # hypothesis<br />[[1. 0. 1. 1.]]                       # tf.floor(hypothesis+0.5)<br />[[False False True False]]            # correct_prediction<br />0.25                                  # accuracy<br />Accuracy : 0.25<br /></span></pre>
<p>hypothesis를 보면 결과가 0.5 부근에 몰려있는 것을 볼 수 있다. 동영상 캡쳐에서도 동일하다. 교수님은 50% 확률로 맞았지만, 나는 25%밖에 안 된다.</p>
<p>tf.floor 함수를 호출해서 결과를 0 또는 1로 만들었다. 0.5를 더한 다음에 소숫점 이하를 버렸다. 이걸 [0, 1, 1, 0]과 비교하면 첫 번째, 두 번째, 네 번째를 틀렸고, 세 번째에서 하나 맞았다. 결과는 [False, False, True, False]. XOR에 대해서 직선을 그어서 구분한다는 것 자체가 그냥 봐도 불가능하다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:630px;;height:auto;max-width:100%"><img src="http://cfile25.uf.tistory.com/image/22121847579EE90E152E25" style="max-width:100%;height:auto" width="630" height="329" filename="lab_09_04.png" filemime="image/jpeg"/></span></p>
<p>앞의 코드를 살짝 바꾸니까 neural network 코드가 됐다. 그림에서는 198,000번 반복한 것 같은데.. 어찌 됐든 Accuracy가 1.0으로 잘 나왔다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:669px;;height:auto;max-width:100%"><img src="http://cfile10.uf.tistory.com/image/232A4D4F579EE9B60EDC23" style="max-width:100%;height:auto" width="669" height="272" filename="lab_09_05.png" filemime="image/jpeg"/></span></p>
<p>그림에서 보여지는 만큼만 코드가 바뀌었다. W1과 W2, b1과 b2를 초기화시키는 부분하고 logistic regression을 연결시키는 부분.</p>
<p>W1을 만들 때, 2x2 행렬이 들어간다. 이 값은 L2를 만들 때, matmul(X, W1)에서 사용된다. 그런데, 우리는 여전히 2x4 크기의 x_data를 갖고 있어서 에러가 발생한다. 동영상에서 이 부분이 누락됐다.</p>
<p><b>&nbsp; x_data = np.transpose(xy[:-1])<br />&nbsp; y_data = np.reshape(xy[-1], (4,1))</b></p>
<p>두 번의 행렬 계산이 일어난다. 첫 번째는 앞에서 설명한 matmul(X, W1). 이 부분은 (4행 2열) x (2행 2열)의 행렬 계산으로 처리되고 결과는 4행 2열로 나온다. 두 번째는 matmul(L2, W2)인데, (4행 2열) x (2행 1열)의 행렬 계산이 일어나고 최종 결과는 4행 1열로 나온다. 마지막에는 y_data와 비교해야 하니까 y_data도 4행 1열로 만들었다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><span style="color:#66d9ef;font-style:italic;">import </span>numpy <span style="color:#66d9ef;font-style:italic;">as </span>np<br /><br />xy <span style="color:#f92672;">= </span>np.loadtxt(<span style="color:#008080;font-weight:bold;">'07train.txt'</span>, <span style="color:#660099;">unpack</span><span style="color:#f92672;">=</span><span style="color:#66d9ef;font-style:italic;">True</span>)<br /><br />x_data <span style="color:#f92672;">= </span>np.transpose(xy[<span style="color:#f92672;">:-</span><span style="color:#ae81ff;">1</span>])<br />y_data <span style="color:#f92672;">= </span>np.reshape(xy[<span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>], (<span style="color:#ae81ff;">4</span>, <span style="color:#ae81ff;">1</span>))<br /><br />X <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)<br />Y <span style="color:#f92672;">= </span>tf.placeholder(tf.float32)<br /><br />W1 <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">2</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br />W2 <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br />b1 <span style="color:#f92672;">= </span>tf.Variable(tf.zeros([<span style="color:#ae81ff;">2</span>]))<br />b2 <span style="color:#f92672;">= </span>tf.Variable(tf.zeros([<span style="color:#ae81ff;">1</span>]))<br /><br />L2 <span style="color:#f92672;">= </span>tf.sigmoid(tf.matmul(X, W1) <span style="color:#f92672;">+ </span>b1)<br />hypothesis <span style="color:#f92672;">= </span>tf.sigmoid(tf.matmul(L2, W2) <span style="color:#f92672;">+ </span>b2)<br /><br />cost <span style="color:#f92672;">= -</span>tf.reduce_mean(Y <span style="color:#f92672;">* </span>tf.log(hypothesis) <span style="color:#f92672;">+ </span>(<span style="color:#ae81ff;">1 </span><span style="color:#f92672;">- </span>Y) <span style="color:#f92672;">* </span>tf.log(<span style="color:#ae81ff;">1 </span><span style="color:#f92672;">- </span>hypothesis))<br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)<br />optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br /><span style="color:#66d9ef;font-style:italic;">with </span>tf.Session() <span style="color:#66d9ef;font-style:italic;">as </span>sess<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>sess.run(init)<br /><br />    <span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">10000</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span>sess.run(train, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data})<br />        <span style="color:#66d9ef;font-style:italic;">if </span>step <span style="color:#f92672;">% </span><span style="color:#ae81ff;">1000 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">999</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">            </span><span style="color:#75715e;"># b1과 b2는 출력 생략. 한 줄에 출력하기 위해 reshape 사용<br /></span><span style="color:#75715e;">            </span>r1, (r2, r3) <span style="color:#f92672;">= </span>sess.run(cost, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">: </span>x_data, Y<span style="color:#f92672;">: </span>y_data}), sess.run([W1, W2])<br />            <span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'{:5} {:10.8f} {} {}'</span>.format(step<span style="color:#f92672;">+</span><span style="color:#ae81ff;">1</span>, r1, np.reshape(r2, (<span style="color:#ae81ff;">1</span>,<span style="color:#ae81ff;">4</span>)), np.reshape(r3, (<span style="color:#ae81ff;">1</span>,<span style="color:#ae81ff;">2</span>))))<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'-'</span><span style="color:#f92672;">*</span><span style="color:#ae81ff;">50</span>)<br /><br />    <span style="color:#75715e;"># Test model<br /></span><span style="color:#75715e;">    </span>correct_prediction <span style="color:#f92672;">= </span>tf.equal(tf.floor(hypothesis<span style="color:#f92672;">+</span><span style="color:#ae81ff;">0.5</span>), Y)<br /><br />    <span style="color:#75715e;">#Calculate accuraty<br /></span><span style="color:#75715e;">    </span>accuracy <span style="color:#f92672;">= </span>tf.reduce_mean(tf.cast(correct_prediction, <span style="color:#008080;font-weight:bold;">'float'</span>))<br />    param <span style="color:#f92672;">= </span>[hypothesis, tf.floor(hypothesis<span style="color:#f92672;">+</span><span style="color:#ae81ff;">0.5</span>), correct_prediction, accuracy]<br />    result <span style="color:#f92672;">= </span>sess.run(param, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{X<span style="color:#f92672;">:</span>x_data, Y<span style="color:#f92672;">:</span>y_data})<br /><br />    <span style="color:#66d9ef;">print</span>(<span style="color:#f92672;">*</span>result[<span style="color:#ae81ff;">0</span>])<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#f92672;">*</span>result[<span style="color:#ae81ff;">1</span>])<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#f92672;">*</span>result[<span style="color:#ae81ff;">2</span>])<br />    <span style="color:#66d9ef;">print</span>( result[<span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>])<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'Accuracy :'</span>, accuracy.eval({X<span style="color:#f92672;">:</span>x_data, Y<span style="color:#f92672;">:</span>y_data}))<br /></pre>
<p>역시 코드를 직접 입력해서 만들어 보았다. logistic regression처럼 1,000번만 돌렸더니, 결과가 안 나왔다. 2,000번을 돌렸는데도, 결과가 좋지 않게 나왔다. 그래서, 10,000번을 반복하고 있다. 앞에 설명했던 것처럼 코드를 일부만 수정했고, 추가로 print 함수의 형식을 조금 바꿨다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color: rgb(255, 255, 255);">[출력 결과]<br /> 1000 0.68227279 [[-1.24171805  0.06442181 -0.91778374  0.46263656]] [[-0.98959821 -0.52660322]]<br /> 2000 0.59741580 [[-2.62564516  0.24180347 -2.59751081  0.63329911]] [[-2.69694042 -0.66693091]]<br /> 3000 0.46362704 [[-4.15857601  0.92896783 -4.20671129  1.22253466]] [[-4.52800512 -1.86550784]]<br /> 4000 0.19515765 [[-5.1121006   2.5385437  -5.1532464   2.54854703]] [[-6.11614418 -4.89787388]]<br /> 5000 0.08121696 [[-5.61055708  3.47669911 -5.63592672  3.47990155]] [[-7.34246731 -6.90866327]]<br /> 6000 0.04758544 [[-5.89690733  3.94383311 -5.91585779  3.94633341]] [[-8.16183186 -8.0021019 ]]<br /> 7000 0.03300261 [[-6.09076691  4.23373413 -6.1062789   4.23588562]] [[-8.75467396 -8.72057724]]<br /> 8000 0.02506309 [[-6.23520756  4.43864489 -6.24855947  4.4405632 ]] [[-9.21470547 -9.24997044]]<br /> 9000 0.02012194 [[-6.34940481  4.59504986 -6.3612566   4.59679461]] [[-9.58913803 -9.66739845]]<br />10000 0.01676891 [[-6.44336367  4.72052336 -6.45410633  4.72213221]] [[ -9.90425777 -10.01130104]]<br />--------------------------------------------------<br />[ 0.01334288] [ 0.981884] [ 0.9818663] [ 0.01691606]<br />[ 0.] [ 1.] [ 1.] [ 0.]<br />[ True] [ True] [ True] [ True]<br />1.0<br />Accuracy : 1.0</span></pre>
<p>출력 결과를 보니까, Accuracy에 1.0이 나왔고, cost 또한 제대로 감소하고 있다는 것을 볼 수 있다. []로 감싸여 있는 W1과 W2 또한 값이 잘 바뀌는 것 같다. 그러나, 여전히 cost가 감소하고 있기 때문에 반복 횟수를 늘려도 된다. 원하는 결과가 나오지 않았다면, 당연히 20,000번으로 수정해야 한다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:616px;;height:auto;max-width:100%"><img src="http://cfile7.uf.tistory.com/image/26091F3C579EED041C4F5A" style="max-width:100%;height:auto" width="616" height="310" filename="lab_09_06.png" filemime="image/jpeg"/></span><br /></p>
<p>Neural Network 모델에서 layer를 추가했다. 첫 번째 layer를 input layer, 가운데 layer를 hidden layer, 마지막 layer를 output layer라고 부른다. hidden layer의 갯수에는 제한이 없다. 다만 너무 많으면 overfitting 문제가 발생할 수 있다.</p>
<p>W1, W2, W3에서 중요한 점은 행렬 곱셈이 적용되기 때문에 행렬 곱셈을 할 수 있는 형태로 layer가 추가되어야 한다는 점이다. 첫 번째가 2행 5열이라면 두 번째는 5행으로 시작해서 5행 4열, 세 번째는 4행으로 시작해서 4행 1열. 입력과 출력 데이터는 갯수가 정해져 있기 때문에 바꿀 수 없다. 파일에서 가져왔을 때, 열의 갯수가 이미 정해져 있기 때문에 바꿀 수 없다. 다만 열 전체를 사용하지 않거나 조합해서 새로운 열을 만드는 방식으로 feature 갯수를 바꿀 수는 있다. 이 코드에서는 2행 5열이므로 x열은 2개, 4행 1열이니까 y열은 1개가 된다.</p>
<p>hypothesis를 계산하는 것은 이전과 달라지지 않았다. L2를 L3에 전달하고, L3를 hypothesis에 전달하면 된다.그냥 갯수만 많아질 뿐, 복잡하지는 않다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:747px;;height:auto;max-width:100%"><img src="http://cfile29.uf.tistory.com/image/26178C3C579EED0511AED8" style="max-width:100%;height:auto" width="747" height="352" filename="lab_09_07.png" filemime="image/jpeg"/></span></p>
<p>이번 그림에서 출력된 W1은 10행 2열의 결과를 보여준다. W1 출력에 포함된 갯수를 세면 된다. 이번 코드는 텐서보드와 관련이 있어서 여기서 설명하지 않고, 다음 글에서 텐서보드와 함께 보도록 한다.</p><div class="daum_like_wrapper"><iframe class="daum_like_button" id="daum_like_button_37" frameborder="0" scrolling="no" allowTransparency="true" src="http://pythonkim.tistory.com/like/?uid=2072317_37&sc=404%2CblogId_2072317&url=http%3A%2F%2Fpythonkim.tistory.com%2F37&published=1470033643" style="width:100%;height:44px;margin:10px auto"></iframe></div><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-37-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-37-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=37" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/40" >30. Sigmoid 보다 ReLU가 더 좋아 (lec 10-1)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.02</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/38" >29. Tensor Board로 딥네트웍 들여다보기 (lab 09-2)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.01</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/37"  class ="current" >28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.01</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/36" >27. 딥넷트웍 학습 시키기 (backpropagation) (lec 09-3)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.01</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/35" >26. 특별편- 10분안에 미분 정리하기 (lec 09-2)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.01</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/34" >25. 파이썬으로 XOR 조합 찾아보기</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.01</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "37"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/37"]);
_tiq.push(["__setParam", "date", "2016-08-01 15:40:43"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "20924"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__setParam", "like_ex", "{'serviceId': 'tistory', 'uniqueId': '2072317_37', 'serviceCategories': '404,blogId_2072317'}"]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_37", 
"c_title":"파이쿵 :: 28. XOR을 위한 텐서플로우 딥네트웍 (lab 09-1)", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-08-01 15:40:43", 
"plink":"http://pythonkim.tistory.com/37", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
