<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="여러 개의 입력(variable, feature)을 가진 linear regression을 텐서플로우로 직접 구현해 본다.  정확한 결과를 보여주기 위해 매우 확실한 데이터를 사용하고 있다. 우리의 목적은 최소 비용을 갖는 W1과 W2, b를 찾는 것이다. 그래야 정확한 직선을 그래프에 그릴 수 있고, 그걸 토대로 다른 값의 feature에 대해 예측할 수 있게 된다. 데이터에서 요구하는 정답은 W1과 W2는 모두 1이고, b는 0인 결과이다. 1*1 + 0*1 + 0..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/14" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/14" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)" ><meta name="by" content="사과쿵" ><meta property="og:description" content="여러 개의 입력(variable, feature)을 가진 linear regression을 텐서플로우로 직접 구현해 본다.  정확한 결과를 보여주기 위해 매우 확실한 데이터를 사용하고 있다. 우리의 목적은 최소 비용을 갖는 W1과 W2, b를 찾는 것이다. 그래야 정확한 직선을 그래프에 그릴 수 있고, 그걸 토대로 다른 값의 feature에 대해 예측할 수 있게 된다. 데이터에서 요구하는 정답은 W1과 W2는 모두 1이고, b는 0인 결과이다. 1*1 + 0*1 + 0.." ><meta property="og:image" content="http://cfile4.uf.tistory.com/image/2422A64B5795BD1A166185" ><meta property="article:section" content="과학" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)" ><meta name="twitter:description" content="여러 개의 입력(variable, feature)을 가진 linear regression을 텐서플로우로 직접 구현해 본다.  정확한 결과를 보여주기 위해 매우 확실한 데이터를 사용하고 있다. 우리의 목적은 최소 비용을 갖는 W1과 W2, b를 찾는 것이다. 그래야 정확한 직선을 그래프에 그릴 수 있고, 그걸 토대로 다른 값의 feature에 대해 예측할 수 있게 된다. 데이터에서 요구하는 정답은 W1과 W2는 모두 1이고, b는 0인 결과이다. 1*1 + 0*1 + 0.." ><meta property="twitter:image" content="http://cfile4.uf.tistory.com/image/2422A64B5795BD1A166185" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/14" ><meta name="plink" content="http://pythonkim.tistory.com/14" ><meta name="title" content="08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/14" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/14" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/14" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/14" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_14" /><meta property="article:published_time" content="2016-07-25T18:38:19+09:00" ><meta property="og:regDate" content="20160725183819" ><meta property="article:modified_time" content="2017-01-15T17:54:11+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/14"},"url":"http://pythonkim.tistory.com/14","headline":"08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)","description":"여러 개의 입력(variable, feature)을 가진 linear regression을 텐서플로우로 직접 구현해 본다.  정확한 결과를 보여주기 위해 매우 확실한 데이터를 사용하고 있다. 우리의 목적은 최소 비용을 갖는 W1과 W2, b를 찾는 것이다. 그래야 정확한 직선을 그래프에 그릴 수 있고, 그걸 토대로 다른 값의 feature에 대해 예측할 수 있게 된다. 데이터에서 요구하는 정답은 W1과 W2는 모두 1이고, b는 0인 결과이다. 1*1 + 0*1 + 0..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile4.uf.tistory.com/image/2422A64B5795BD1A166185","width":"800px","height":"800px"},"datePublished":"20160725T18:38:19+09:00","dateModified":"20170115T17:54:11+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/15","NEXT_PAGE":"\/13","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F14","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.07.25 18:38</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:700px;;height:auto;max-width:100%"><img src="http://cfile23.uf.tistory.com/image/2347AB39579E32DA028086" style="max-width:100%;height:auto" width="700" height="303" filename="lab_04_00.png" filemime="image/jpeg"/></span></p>
<p>여러 개의 입력(variable, feature)을 가진 linear regression을 텐서플로우로 직접 구현해 본다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:725px;;height:auto;max-width:100%"><img src="http://cfile4.uf.tistory.com/image/2422A64B5795BD1A166185" style="max-width:100%;height:auto" width="725" height="470" filename="lab_04_01.png" filemime="image/jpeg"/></span></p>
<p>정확한 결과를 보여주기 위해 매우 확실한 데이터를 사용하고 있다. 우리의 목적은 최소 비용을 갖는 W1과 W2, b를 찾는 것이다.  그래야 정확한 직선을 그래프에 그릴 수 있고, 그걸 토대로 다른 값의 feature에 대해 예측할 수 있게 된다. 데이터에서 요구하는 정답은 W1과 W2는 모두 1이고, b는 0인 결과이다.</p>
<p>&nbsp; 1*1 + 0*1 + 0 = 1<br />&nbsp; 0*1 + 2*1 + 0 = 2<br />&nbsp; 3*1 + 0*1 + 0 = 3<br />&nbsp; 0*1 + 4*1 + 0 = 4<br />&nbsp; 5*1 + 0*1 + 0 = 5</p>
<p>그림에 있는 코드를 잠시 보자. 이 코드가 뒤에 나올 코드의 핵심적인 부분이다. W1과 W2는 cost 함수에서 매번 변경된다는 것을 기억할 것이다. 시작은 -1과 1 사이의 어떤 난수로 했다. y 절편에 해당하는 b 또한 -1과 1 사이의 난수이다.</p>
<p>hypothesis를 보면 "1*1 + 0*1 + 0"처럼 정직하게 공식을 구성하고 있다. 이렇게 hypothesis를 구성하고 나면, 우리가 추가로 할 것은 없다. 텐서플로우에 전달하면 알아서 기울기(W)를 계산해 준다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br />x1_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">3</span>, <span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">5</span>]<br />x2_data <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">4</span>, <span style="color:#ae81ff;">0</span>]<br />y_data  <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">3</span>, <span style="color:#ae81ff;">4</span>, <span style="color:#ae81ff;">5</span>]<br /><br />W1 <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br />W2 <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br />b  <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br /><span style="color:#75715e;"># feature 갯수만큼 곱하는 이 부분을 제외하면 one-variable과 다른 곳이 없다<br /></span>hypothesis <span style="color:#f92672;">= </span>W1<span style="color:#f92672;">*</span>x1_data <span style="color:#f92672;">+ </span>W2<span style="color:#f92672;">*</span>x2_data <span style="color:#f92672;">+ </span>b<br /><br />cost <span style="color:#f92672;">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color:#f92672;">- </span>y_data))<br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)<br />optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">2001</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;"><br /></span><span style="color:#f92672;">    </span>sess.run(train)<br /><br />    <span style="color:#66d9ef;font-style:italic;">if </span>step<span style="color:#f92672;">%</span><span style="color:#ae81ff;">20 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#66d9ef;">print</span>(step, sess.run(cost), sess.run(W1), sess.run(W2), sess.run(b))

sess.close()</pre><pre style="background-color: rgb(39, 40, 34);"><p><font color="#f8f8f2" face="Menlo"><span style="font-size: 9pt; color: rgb(255, 255, 255);">[출력 결과]
...
</span><span style="font-size: 12px; color: rgb(255, 255, 255);">1920 1.42109e-14 [ 1.] [ 0.99999994] [  1.74593097e-07]
1940 1.42109e-14 [ 1.] [ 0.99999994] [  1.74593097e-07]
1960 1.42109e-14 [ 1.] [ 0.99999994] [  1.74593097e-07]
1980 1.42109e-14 [ 1.] [ 0.99999994] [  1.74593097e-07]
2000 1.42109e-14 [ 1.] [ 0.99999994] [  1.74593097e-07]
</span></font></p></pre>
<p>one-variable에서 작성했던 코드와 다른 점이 없어 코드에 대한 설명은 생략한다.</p>
<p>출력 결과에서 3번째가 W1, 4번째가 W2, 마지막이 b에 해당한다. 어느 시점 이후로는 cost가 바뀌지 않기 때문에 W1, W2, b의 결과 또한 바뀌지 않음을 알 수 있다. 이미 충분히 작은 값이기 때문에 더이상 줄어들 여지가 없을 수도 있다. 결과에 나온 cost는 1.42109를 0(zero)이 14개인 숫자로 나눈 값이다.</p>
<p>동영상과 다른 결과가 나오는 것은 난수로 시작했기 때문이고, 어떤 값에서 시작을 해도 같은 결과가 나온다는 것을 보여주기 위해 난수를 사용하고 있다고 이전 글에서 설명했었다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:604px;;height:auto;max-width:100%"><img src="http://cfile6.uf.tistory.com/image/267D08395795C11416B615" style="max-width:100%;height:auto" width="604" height="486" filename="lab_04_02.png" filemime="image/jpeg"/></span></p>
<p>앞에서 보여준 코드는 정직하다. 이제 행렬(matrix)로 변환한 코드를 볼 차례다. x에 해당하는 데이터를 2개가 아닌 1개의 데이터로 만들었다. x_data는 2차원 리스트이고, 0번째에는 x1, 1번째에는 x2가 들어있다.</p>
<p>기울기인 W 또한 행렬로 만들어야 한다. x_data가 2차원이니까 값을 2개 갖는 행렬이 되어야 한다. 1x2가 맞을까, 2x1이 맞을까? 아직도 이게 딱 생각나지 않는다. 잠시 차분하게 생각을 해야 답을 알 수 있다. 내 자신이 답답하다.</p>
<p><b>행렬 곱셈을 할 때, W가 앞에 온다는 것을 기억할 것이다. (WX + b) 그래서, W가 앞에 와야 한다면 x_data가 2행 5열이기 때문에 W는 1행 2열이어야 한다. 2행 1열 x 2행 5열은 에러니까.</b></p>
<p>이제 진짜 중요하고 어려운 것을 설명한다. x_data가 진짜 2행 5열의 리스트라는 생각이 드는가? 정말? 이게 말이 안 되는 이유는 이 글의 첫 번째 그림에 나와 있다.</p>
<p>그림에서는 x1과 x2에 대해 5행 2열로 표현하고 있다. 행이 5개 열이 2개란 말이다. 그런데, 어떻게 여기 와서 2행 5열이라고 얘기할 수가 있단 말인가?</p>
<p>문법적으로는 2행 5열이 맞다. 그러나, 여기서는 각각을 feature에 관련된 데이터 1개로 취급을 해야 한다. 2행 5열이 아닌 2행 1열로 보는 것이 좋다. 결론적으로 1행 2열 x 2행 1열이 되어서 행렬 곱셈이 일어난다. W1과 x1 feature에 포함된 5개를 곱해서 더하고, W2와 x2 feature에 포함된 5개를 곱해서 더하고.</p>
<p>그러나, 헷갈리면 안 된다. 2행 1열이라고 얘기한 것은 이렇게 곱셈하게 된다는 것을 보여주기 위한 것이지 진짜는 아니다. 1행 2열 x 2행 5열이 진짜가 되고, 결과 행렬을 1행 5열이 된다. 실제 코드에서는 1행 5열의 결과에서 y_data(1행 5열)를 뺀 결과에 제곱을 하고 덧셈을 하는 추가 연산이 일어난다. 이 부분은 진짜 중요하니까, 반드시 이해해야 한다. 내 경험담이다.</p>
<p><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br /><span style="color:#75715e;"># 앞의 코드에서는 정수였는데, 실수로 바뀌었다. 정수로 처리하면 에러.<br /></span>x_data <span style="color:#f92672;">= </span>[[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">3.</span>, <span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">5.</span>], [<span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">4.</span>, <span style="color:#ae81ff;">0.</span>]]   <span style="color:#75715e;"># W의 값은 [[-0.49763036  0.79181528]]<br /></span>y_data  <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">3</span>, <span style="color:#ae81ff;">4</span>, <span style="color:#ae81ff;">5</span>]<br /><br />W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">2</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))   <span style="color:#75715e;"># [2, 1]은 안 된다. 행렬 곱셈이니까.<br /></span>b <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))<br /><br /><span style="color:#75715e;"># W와 곱해야 하기 때문에 x_data를 실수로 변경<br /></span>hypothesis <span style="color:#f92672;">= </span>tf.matmul(W, x_data) <span style="color:#f92672;">+ </span>b                   <span style="color:#75715e;"># (1x2) * (2x5) = (1x5)<br /></span><span style="color:#75715e;"><br /></span>cost <span style="color:#f92672;">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color:#f92672;">- </span>y_data))<br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)<br />optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#75715e;"># 테스트 출력<br /></span><span style="color:#66d9ef;">print</span>(sess.run(W))<br /><span style="color:#66d9ef;">print</span>(sess.run(tf.matmul(W, x_data)))<br /><br /><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">2001</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;"><br /></span><span style="color:#f92672;">    </span>sess.run(train)<br /><br />    <span style="color:#66d9ef;font-style:italic;">if </span>step<span style="color:#f92672;">%</span><span style="color:#ae81ff;">20 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#66d9ef;">print</span>(step, sess.run(cost), sess.run(W), sess.run(b))

sess.close()</pre><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><p><span style="color: rgb(255, 255, 255);">[출력 결과]
[[ 0.23744965 -0.22514296]]
[[ 0.23744965 -0.45028591  0.71234894 -0.90057182  1.18724823]]
</span><span style="font-size: 9pt; color: rgb(255, 255, 255);">...
</span><span style="color: rgb(255, 255, 255);">1920 1.42109e-14 [[ 1.          0.99999994]] [  1.75134133e-07]
1940 1.42109e-14 [[ 1.          0.99999994]] [  1.75134133e-07]
1960 1.42109e-14 [[ 1.          0.99999994]] [  1.75134133e-07]
1980 1.42109e-14 [[ 1.          0.99999994]] [  1.75134133e-07]
2000 1.42109e-14 [[ 1.          0.99999994]] [  1.75134133e-07]</span></p></pre>
<p>x_data는 2행 5열, W는 1행 2열이다. 1행 2열 x 2행 5열의 결과는 주석에 있는 것처럼 1행 5열이 된다.텐서플로우에서 행렬 곱셈을 수행하는 함수는 matmul이다. cost를 구하기 위해 hypothesis - y_data는 행렬 뺄셈이다. 곱셈과 달리 같은 행과 열에 있는 요소를 빼면 된다. 다만 그러기 위해서는 같은 크기의 행렬이어야 하고, hypothesis와 y_data 크기가 같아야 한다. 모두 1행 5열이다. square 함수 또한 행렬 함수로 각 요소를 제곱하고, 최종적으로 reduce_mean 함수로 평균을 계산한다. W와 x_data의 순서를 바꿔서 tf.matmul(x_data, W)라고 쓰는 것은 에러다. 2행 5열 x 1행 2열은 행렬 곱셈을 수행할 수 없으니까.</p>
<p>테스트 출력을 통해 헷갈릴 수 있는 행렬 연산의 결과를 표시했다. W는 <b>[0.23744965 -0.22514296]</b>을 요소로 갖고 있는 1행 2열의 리스트이다. W와 x_data를 곱한 결과는 <b>[0.23744965 -0.45028591 0.71234894 -0.90057182 1.18724823]</b> 요소를 갖는 1행 5열의 리스트이다. 1개만 갖고 있기 때문에 1행이고, 그 안에 2개 또는 5개가 있어서 2열 또는 5열이다.</p>
<p>출력 결과는 앞의 코드와 똑같이 W1, W2에 해당하는 W 행렬은 결과가 모두 1이고, b는 0과 다름없다. feature(x 변수)가 많아질 때, 코드의 어떤 부분에 영향을 주는지 이해하는 것이 중요하다. 텐서플로우와 관련된 코드는 거의 달라지지 않는다. hypothesis를 구성하는 공식과 W의 결과를 출력하는 정도만 달라지고 있다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:770px;;height:auto;max-width:100%"><img src="http://cfile10.uf.tistory.com/image/253FE3465795D93A149F4F" style="max-width:100%;height:auto" width="770" height="530" filename="lab_04_03.png" filemime="image/jpeg"/></span></p>
<p>마지막 코드다. 그동안 무시 아닌 무시를 당했던 y 절편에 해당하는 b를 행렬에 포함시켰다. 1행 4열 x 4행 1열의 행렬 곱셈으로 크기가 살짝 늘어났다. 그럼에도 행렬 곱셈이기 때문에 코드가 달라지진 않는다.</p>
<p>위의 공식은 y를 1개만 예측한다는 것을 정확히 이해해야 한다. X의 feature가 3개 있기 때문에 가중치인 W 또한 3개가 되고, 이들 전체를 계산해서 1개의 y 예측을 만들어 낸다. 여러 번에 걸친 데이터가 있다면, 초록색으로 표시된 W는 바뀌지 않지만, 빨간색으로 표시한 X는 오른쪽으로 길게 늘어지는 행렬이 되어야 한다. 5개의 데이터가 있다면, 3행 5열. 여기에 b라고 하는 feature 아닌 feature까지 추가되니까, 최종적으로는 4행 5열의 행렬이 만들어 진다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><br /><span style="color:#75715e;"># 앞의 코드에서 bias(b)를 행렬에 추가<br /></span>x_data <span style="color:#f92672;">= </span>[[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">1</span>], [<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">3.</span>, <span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">5.</span>], [<span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">2.</span>, <span style="color:#ae81ff;">0.</span>, <span style="color:#ae81ff;">4.</span>, <span style="color:#ae81ff;">0.</span>]]   <span style="color:#75715e;"># 갯수가 같아야 하므로 b를 리스트로 처리<br /></span>y_data  <span style="color:#f92672;">= </span>[<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">2</span>, <span style="color:#ae81ff;">3</span>, <span style="color:#ae81ff;">4</span>, <span style="color:#ae81ff;">5</span>]<br /><br />W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">3</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>))       <span style="color:#75715e;"># [1, 3]으로 변경하고, b 삭제<br /></span><span style="color:#75715e;"><br /></span>hypothesis <span style="color:#f92672;">= </span>tf.matmul(W, x_data)                           <span style="color:#75715e;"># b가 사라짐<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># ------------------------------------------------------------------------- #<br /></span><span style="color:#75715e;"><br /></span>cost <span style="color:#f92672;">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color:#f92672;">- </span>y_data))<br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)<br />optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)<br /><br />init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">2001</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;"><br /></span><span style="color:#f92672;">    </span>sess.run(train)<br /><br />    <span style="color:#66d9ef;font-style:italic;">if </span>step<span style="color:#f92672;">%</span><span style="color:#ae81ff;">20 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#66d9ef;">print</span>(step, sess.run(cost), sess.run(W))        <span style="color:#75715e;"># b 사라짐. W에서 3가지 항목 출력

<span style="color: rgb(255, 255, 255);">sess.close()</span></span></pre><pre style="background-color: rgb(39, 40, 34);"><font color="#f8f8f2" face="Menlo"><span style="font-size: 12px; color: rgb(255, 255, 255);">[출력 결과]
...
1920 4.83169e-14 [[  1.60856530e-07   9.99999940e-01   9.99999940e-01]]
1940 4.83169e-14 [[  1.60856530e-07   9.99999940e-01   9.99999940e-01]]
1960 4.83169e-14 [[  1.60856530e-07   9.99999940e-01   9.99999940e-01]]
1980 4.83169e-14 [[  1.60856530e-07   9.99999940e-01   9.99999940e-01]]
2000 4.83169e-14 [[  1.60856530e-07   9.99999940e-01   9.99999940e-01]]</span></font><span style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt;">
</span></pre>
<p>y 절편 b를 추가해서 맨 앞의 코드 일부만 달라졌다. x_data는 3행 5열이 되었고, W는 1행 3열이 되었다. hypothesis를 구하는 코드에서 b가 사라진 것을 볼 수 있다. 이번 코드에서 가장 중요한 것은 b가 행렬에 포함되면서 여러 번 반복된 사실이다. 정확하게는 열의 갯수만큼으로 확장되었다.</p>
<p>&nbsp; H(x) = Wx + b</p>
<p>이 코드는 b를 한 번만 더하는 코드같지만, 실제로는 X의 데이터 갯수만큼 더한다.</p>
<p>&nbsp; x가 1일 때에 기울기를 곱한 결과에 b를 더한다.<br />&nbsp; x가 2일 때에 기울기를 곱한 결과에 b를 더한다.<br />&nbsp; x가 3일 때에 기울기를 곱한 결과에 b를 더한다.<br />&nbsp; x가 4일 때에 기울기를 곱한 결과에 b를 더한다.<br />&nbsp; x가 5일 때에 기울기를 곱한 결과에 b를 더한다.<br /></p>
<p>이게 당연한 것이 W는 기울기일 뿐이고 말 그대로 기울어진 정도만을 표시한다. x가 1일 때의 기울기를 곱한 결과는 원점(0,0)에서의 y값이므로 여기에 y 절편 b(bias)를 더해서 이동을 시켜야 한다. 설명이 이해가 안 되면, y = 2x + 3의 그래프를 그려보면 된다.</p>
<p>&nbsp; x = [1, 2, 3, 4, 5]<br />&nbsp; y = [5, 7, 9, 11, 13]</p>
<p>여기서 W*x에 해당하는 y = 2x의 그래프를 그리면, 왜 매번 3을 더해야 하는지를 알 수 있을 것이다.</p>
<p><br /></p>
<p>예제에서 사용할 데이터 파일 <span class="imageblock" style="display:inline-block;;height:auto;max-width:100%"><a href="http://pythonkim.tistory.com/attachment/cfile21.uf@214E4A5057E5E6E129414F.txt"><img src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/image/extension/txt.gif" alt="" style="vertical-align: middle;" /> 03train.txt</a></span></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>tensorflow <span style="color:#66d9ef;font-style:italic;">as </span>tf<br /><span style="color:#66d9ef;font-style:italic;">import </span>numpy <span style="color:#66d9ef;font-style:italic;">as </span>np<br /><br /><span style="color:#75715e;"># 03train.txt<br /></span><span style="color:#75715e;"># #x0 x1 x2 y<br /></span><span style="color:#75715e;"># 1   1   0   1<br /></span><span style="color:#75715e;"># 1   0   2   2<br /></span><span style="color:#75715e;"># 1   3   0   3<br /></span><span style="color:#75715e;"># 1   0   4   4<br /></span><span style="color:#75715e;"># 1   5   0   5<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># #으로 시작하는 첫 번째 줄은 주석으로 판단하고 읽지 않음<br /></span>xy <span style="color:#f92672;">= </span>np.loadtxt(<span style="color:#008080;font-weight:bold;">'03train.txt'</span>, <span style="color:#660099;">unpack</span><span style="color:#f92672;">=</span><span style="color:#66d9ef;font-style:italic;">True</span>, <span style="color:#660099;">dtype</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'float32'</span>)<br />x_data <span style="color:#f92672;">= </span>xy[<span style="color:#f92672;">:-</span><span style="color:#ae81ff;">1</span>]<br />y_data <span style="color:#f92672;">= </span>xy[<span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>]<br /><br /><span style="color:#75715e;"># 5행 4열로 구성된 파일이지만, numpy에서 읽어오면 4행 5열이 된다.<br /></span><span style="color:#75715e;"># 그래야 열 단위로 행렬 연산을 수행할 수 있다.<br /></span><span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(xy))         <span style="color:#75715e;"># &lt;class 'numpy.ndarray'&gt;<br /></span><span style="color:#66d9ef;">print</span>(xy.shape)         <span style="color:#75715e;"># (4, 5)<br /></span><span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">len</span>(x_data))      <span style="color:#75715e;"># 3<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># W는 1x(x_data 크기) 매트릭스<br /></span>W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>, <span style="color:#66d9ef;">len</span>(x_data)], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">1</span>))<br /><br />hypothesis <span style="color:#f92672;">= </span>tf.matmul(W, x_data)<br /><br />cost <span style="color:#f92672;">= </span>tf.reduce_mean(tf.square(hypothesis <span style="color:#f92672;">- </span>y_data))<br /><br />rate <span style="color:#f92672;">= </span>tf.Variable(<span style="color:#ae81ff;">0.1</span>)  <span style="color:#75715e;"># learning rate, alpha<br /></span>optimizer <span style="color:#f92672;">= </span>tf.train.GradientDescentOptimizer(rate)<br />train <span style="color:#f92672;">= </span>optimizer.minimize(cost)  <span style="color:#75715e;"># goal is minimize cost<br /></span><span style="color:#75715e;"><br /></span>init <span style="color:#f92672;">= </span>tf.initialize_all_variables()<br /><br />sess <span style="color:#f92672;">= </span>tf.Session()<br />sess.run(init)<br /><br /><span style="color:#66d9ef;font-style:italic;">for </span>step <span style="color:#66d9ef;font-style:italic;">in </span><span style="color:#66d9ef;">range</span>(<span style="color:#ae81ff;">2001</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;"><br /></span><span style="color:#f92672;">    </span>sess.run(train)<br /><br />    <span style="color:#66d9ef;font-style:italic;">if </span>step <span style="color:#f92672;">% </span><span style="color:#ae81ff;">20 </span><span style="color:#f92672;">== </span><span style="color:#ae81ff;">0</span><span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#66d9ef;">print</span>(step, sess.run(cost), sess.run(W))

sess.close()</pre><p>이전 코드의 파일 버전이다. 출력 결과는 이전과 똑같기 때문에 생략한다.앞에서는 x_data와 y_data의 데이터를 직접 값을 넣는 방식으로 채웠지만,앞으로는 파일에서 직접 가져오는 방식을 사용하게 된다. 데이터가 너무 많으니까.</p>
<p>데이터를 읽어오는 부분만 보면 된다. numpy에 포함된 loadtxt 함수를 호출해서 파일을 읽어왔다. 정상적으로 읽으면 5행 4열이 되고, 왼쪽 3열과 오른쪽 1열을 분리해서 x_data와 y_data로 사용해야 한다. 그런데, 이 방식은 데이터를 분리하기가 조금 피곤하다. transpose시켜서 읽으면 4행 5열이 되고, 분리하기가 쉽다. unpack 파라미터를 사용하지 않으면 원본 그대로, True를 전달하면 transpose해서 읽는다.</p>
<p><br /></p><pre style="color: rgb(248, 248, 242); font-family: Menlo; font-size: 9pt; background-color: rgb(39, 40, 34);">x_data <span style="color: rgb(249, 38, 114);">= </span>[[<span style="color: rgb(174, 129, 255);">1</span>, <span style="color: rgb(174, 129, 255);">1</span>, <span style="color: rgb(174, 129, 255);">1</span>, <span style="color: rgb(174, 129, 255);">1</span>, <span style="color: rgb(174, 129, 255);">1</span>], [<span style="color: rgb(174, 129, 255);">1.</span>, <span style="color: rgb(174, 129, 255);">0.</span>, <span style="color: rgb(174, 129, 255);">3.</span>, <span style="color: rgb(174, 129, 255);">0.</span>, <span style="color: rgb(174, 129, 255);">5.</span>], [<span style="color: rgb(174, 129, 255);">0.</span>, <span style="color: rgb(174, 129, 255);">2.</span>, <span style="color: rgb(174, 129, 255);">0.</span>, <span style="color: rgb(174, 129, 255);">4.</span>, <span style="color: rgb(174, 129, 255);">0.</span>]] </pre>
<p>앞에서는 이렇게 행렬을 구성했다. 이 데이터는 원래 5행 3열로 생성되어야 하지만, 실제로는 3행 5열이다. 행렬 연산을 열 기준으로 적용해야 하기 때문에 발생하는 현상이다.</p>
<p>파이썬에는 정말 괜찮은 음수 인덱스 기능이 있어서 마지막을 가리킬 때는 -1번째, 마지막에서 두 번째는 -2번째가 된다. 여기에 슬라이싱(slicing)을 사용해서 range 함수와 동일한 기능을 수행할 수도 있다.</p>
<p>&nbsp; xy[1] &nbsp; &nbsp; &nbsp;1번째 요소<br />&nbsp; xy[1:3] &nbsp; 1번째와 2번째 요소. 3은 end 인덱스로 범위에 포함되지 않는다.<br />&nbsp; xy[1::2] &nbsp;1번째부터 2칸씩 건너뛴 모든 요소. 비워둔 칸은 전체의 뜻을 가짐.</p>
<p>여기서는 xy[:-1]을 했으므로 처음부터 마지막 이전까지의 모든 요소가 된다. end 인덱스는 포함하지 않으니까, -1번째는 포함되지 않는다. xy[-1]은 말 그대로 마지막 요소, 여기서는 마지막 열이 된다.</p>
<p><br /></p>
<p>데이터를 읽어올 때, transpose시키지 않았을 때의 달라지는 부분을 적어 봤다. loadtxt 함수 호출에 unpack 파라미터가 빠졌다. 마지막 열을 제거하기 위한 코드도 복잡하고, matmul 함수 호출에서 x_data를 transpose시켜야 하는 것도 불편하다. 나머지는 달라지는 곳이 없다.</p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;">data <span style="color:#f92672;">= </span>np.loadtxt(<span style="color:#008080;font-weight:bold;">'03rain.txt'</span>, <span style="color:#660099;">dtype</span><span style="color:#f92672;">=</span>np.float32)<br /><br />x_data <span style="color:#f92672;">= </span>data[<span style="color:#f92672;">:</span>,<span style="color:#f92672;">:-</span><span style="color:#ae81ff;">1</span>]<br />y_data <span style="color:#f92672;">= </span>data[<span style="color:#f92672;">:</span>,<span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>]<br /><br />W <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">3</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>, <span style="color:#ae81ff;">1</span>))<br /><br />hypothesis <span style="color:#f92672;">= </span>tf.matmul(W, tf.transpose(x_data))<br /></pre><p><br /></p><div class="daum_like_wrapper"><iframe class="daum_like_button" id="daum_like_button_14" frameborder="0" scrolling="no" allowTransparency="true" src="http://pythonkim.tistory.com/like/?uid=2072317_14&sc=404%2CblogId_2072317&url=http%3A%2F%2Fpythonkim.tistory.com%2F14&published=1469439499" style="width:100%;height:44px;margin:10px auto"></iframe></div><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-14-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-14-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=14" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/16" >10. Logistic Classification의 가설 함수 정의 (lec 05-1)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.26</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/15" >09. 1주차 스터디 정리</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.25</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/14"  class ="current" >08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.25</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/13" >07. multi-variable linear regression (lec 04)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.25</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/12" >06. cost 함수를 파이썬만으로 직접 구현</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/11" >05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "14"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/14"]);
_tiq.push(["__setParam", "date", "2016-07-25 18:38:19"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "30098"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__setParam", "like_ex", "{'serviceId': 'tistory', 'uniqueId': '2072317_14', 'serviceCategories': '404,blogId_2072317'}"]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_14", 
"c_title":"파이쿵 :: 08. multi-variable linear regression을 TensorFlow에서 구현하기(lab 04)", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-07-25 18:38:19", 
"plink":"http://pythonkim.tistory.com/14", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
