<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 39. ConvNet의 활용예 (lec 11-3)</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="이번 동영상에서는 CNN이 발전해 온 과정에 대해 구체적인 사례를 들어 설명한다.  CNN의 고전이라고 부를 수 있는 LeNet-5이다. LeCun 교수님께서 1998년에 만드신 모델로, 이후에 나오는 모델에 비해 굉장히 단순한 형태이다. 6개의 hidden layer를 사용하고 있다. 1. Input - 크기 32x32x1. 흑백 이미지. (필터 5x5, stride 1) 2. C1 - 크기 28x28x6. feature maps 6개. (필터 2x2, subsampling) 3. S2 - 크기 14x14x6. feat..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/54" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/54" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="39. ConvNet의 활용예 (lec 11-3)" ><meta name="by" content="사과쿵" ><meta property="og:description" content="이번 동영상에서는 CNN이 발전해 온 과정에 대해 구체적인 사례를 들어 설명한다.  CNN의 고전이라고 부를 수 있는 LeNet-5이다. LeCun 교수님께서 1998년에 만드신 모델로, 이후에 나오는 모델에 비해 굉장히 단순한 형태이다. 6개의 hidden layer를 사용하고 있다. 1. Input - 크기 32x32x1. 흑백 이미지. (필터 5x5, stride 1) 2. C1 - 크기 28x28x6. feature maps 6개. (필터 2x2, subsampling) 3. S2 - 크기 14x14x6. feat.." ><meta property="og:image" content="http://cfile2.uf.tistory.com/image/2111E93557AB5C05232A01" ><meta property="article:section" content="과학" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="39. ConvNet의 활용예 (lec 11-3)" ><meta name="twitter:description" content="이번 동영상에서는 CNN이 발전해 온 과정에 대해 구체적인 사례를 들어 설명한다.  CNN의 고전이라고 부를 수 있는 LeNet-5이다. LeCun 교수님께서 1998년에 만드신 모델로, 이후에 나오는 모델에 비해 굉장히 단순한 형태이다. 6개의 hidden layer를 사용하고 있다. 1. Input - 크기 32x32x1. 흑백 이미지. (필터 5x5, stride 1) 2. C1 - 크기 28x28x6. feature maps 6개. (필터 2x2, subsampling) 3. S2 - 크기 14x14x6. feat.." ><meta property="twitter:image" content="http://cfile2.uf.tistory.com/image/2111E93557AB5C05232A01" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/54" ><meta name="plink" content="http://pythonkim.tistory.com/54" ><meta name="title" content="39. ConvNet의 활용예 (lec 11-3)" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/54" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/54" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/54" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/54" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_54" /><meta property="article:published_time" content="2016-08-11T02:09:42+09:00" ><meta property="og:regDate" content="20160811020942" ><meta property="article:modified_time" content="2017-01-21T12:17:10+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/54"},"url":"http://pythonkim.tistory.com/54","headline":"39. ConvNet의 활용예 (lec 11-3)","description":"이번 동영상에서는 CNN이 발전해 온 과정에 대해 구체적인 사례를 들어 설명한다.  CNN의 고전이라고 부를 수 있는 LeNet-5이다. LeCun 교수님께서 1998년에 만드신 모델로, 이후에 나오는 모델에 비해 굉장히 단순한 형태이다. 6개의 hidden layer를 사용하고 있다. 1. Input - 크기 32x32x1. 흑백 이미지. (필터 5x5, stride 1) 2. C1 - 크기 28x28x6. feature maps 6개. (필터 2x2, subsampling) 3. S2 - 크기 14x14x6. feat..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile2.uf.tistory.com/image/2111E93557AB5C05232A01","width":"800px","height":"800px"},"datePublished":"20160811T02:09:42+09:00","dateModified":"20170121T12:17:10+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/55","NEXT_PAGE":"\/53","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F54","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>39. ConvNet의 활용예 (lec 11-3)</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.08.11 02:09</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:472px;;height:auto;max-width:100%"><img src="http://cfile2.uf.tistory.com/image/2111E93557AB5C05232A01" style="max-width:100%;height:auto" width="472" height="194" filename="K-001.png" filemime="image/jpeg"/></span></p>
<p><br /></p>
<p>이번 동영상에서는 CNN이 발전해 온 과정에 대해 구체적인 사례를 들어 설명한다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile2.uf.tistory.com/image/2777003557AB5C0634C4E7" style="max-width:100%;height:auto" width="764" height="413" filename="K-002.png" filemime="image/jpeg"/></span></p>
<p>CNN의 고전이라고 부를 수 있는 LeNet-5이다. LeCun 교수님께서 1998년에 만드신 모델로, 이후에 나오는 모델에 비해 굉장히 단순한 형태이다. 6개의 hidden layer를 사용하고 있다.</p>
<p>
1. Input - 크기 32x32x1. 흑백 이미지. (필터 5x5, stride 1)<br />
2. C1 - 크기 28x28x6. feature maps 6개. (필터 2x2, subsampling)<br />
3. S2 - 크기 14x14x6. feature maps 6개. (필터 5x5, stride 1)<br />
4. C3 - 크기 10x10x16. feature maps 16개<br />
5. S4 - 크기 5x5x16. feature maps 16개.<br />
6. C5 - FC(Full Connection )120개<br />
7. F6 - FC(Full Connection) 84개<br />
8. Output - GC(Gaussian Connections) 10개. (최종 분류)</p>
<p><br /></p>
<p>softmax에서 좋은 결과를 내기 위한 두 가지 방법이 있었다. Deep &amp; Wide. layer를 여러 개 만드는 deep과 하나의 layer에 노드를 많이 만드는 wide.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile7.uf.tistory.com/image/2326693557AB5C07168B0E" style="max-width:100%;height:auto" width="764" height="413" filename="K-003.png" filemime="image/jpeg"/></span></p>
<p>Deep Learning계의 전설이 된 AlexNet이다. 불과 몇 년 전인데, 벌써 전설이라 불러도 어색하지 않다. 이쪽 세계에서는 시간이 빨리 흐른다.</p>
<p>원본 그림의 크기가 227x227의 정사각형 형태이고, RGB의 3가지 색상으로 구성된다. 앞에 나왔던 32x32의 흑백 이미지에 비해 대략 150배 용량이 증가했다. 필터의 크기 또한 11x11로 엄청나게 커졌다. 그렇다면 W의 갯수는 11x11x3이니까 363개나 된다. 와우.. 이런 필터를 96개나 만들었다. 그럼 전체 입력의 갯수는 363x96으로 34,848(35k)개가 된다. 이러니 며칠씩 걸리면서 계산을 하는 것이 맞다.</p>
<p>&nbsp; (227 - 11) / 4 + 1 = 216/4 + 1 = 54+1 = 55</p>
<p>출력 결과의 크기는 위의 공식으로 계산할 수 있다. 필터의 갯수는 출력 layer 갯수와 동일해야 하니까, 전체 크기는 55x55x96이 된다.</p>
<p>갑자기 96이 뭐지? 라는 생각이 들었다면, 이전 글을 보고 오자. 필터의 갯수는 색상처럼 생각하면 된다고 매우 강조했다. 픽셀을 구분하기 위해 96가지 특징이 있는 셈이다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;text-align: center;;height:auto;max-width:100%"><img src="http://cfile29.uf.tistory.com/image/2314783557AB5C07217934" style="max-width:100%;height:auto" width="764" height="413" filename="K-004.png" filemime="image/jpeg" style="text-align: center;"/></span></p>
<p>두 번째 layer에 대해 설명한다. convolutional layer가 아니라 pooling layer를 적용했다. pooling layer도 stride를 지정할 수 있다. (55 - 3) / 2 + 1은 27이 된다. 단순하게 가장 큰 값을 찾는 Max Pooling을 적용했으므로 필터 갯수였던 96은 바뀌지 않고 입력 또한 없다. Max Pooling을 사용했다는 표시는 네트워크 구성도에 쓰여 있다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile23.uf.tistory.com/image/213E6B3557AB5C0807A3C4" style="max-width:100%;height:auto" width="764" height="413" filename="K-006.png" filemime="image/jpeg"/></span></p>
<p>전체 네트워크를 어떤 방식으로 구성했는지 보여준다. 이 정도면 할만 하겠다는 생각이 든다.</p>
<p>그림 오른쪽 설명에서 ReLU를 사용한 첫 번째 모델이라고 되어 있다. dropout도 사용했고 앙상블(ensemble)까지 적용하고 있다. 앞에서 배운 모든 기술을 적용했다는 것을 알 수 있다. 그래서, 좋은 성능이 나왔고, 사람들이 놀랬다.</p>
<p>그런데, ImageNet 대회가 처음 있었던 것도 아닌데, 15.4%의 에러에 사람들이 반응했다는 것이 어색할 수도 있다. 그 이전에는 27%의 에러였고, 12% 정도의 성능 향상이 있었는데, 기존 기술로도 충분히 가능하다고 생각한다. 개인적으로는 AlexNet의 놀라운 점은 hinton 교수님의 학생이었고, 발전할 가능성이 많은 모델이었기 때문이라고 생각한다. 기존의 머신러닝 기술은 사실상 한계에 도달했었고 새로운 돌파구가 필요했을 수도 있다. 마치 deep learning에 찾아왔던 겨울(winter)처럼. 어찌 됐건 그 이후로 AlexNet을 바탕으로 한 새로운 network이 매년 출시되고 있고, 계속적인 성능 향상이 일어나고 있는 중이다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile27.uf.tistory.com/image/2218903557AB5C091F8AD4" style="max-width:100%;height:auto" width="764" height="413" filename="K-007.png" filemime="image/jpeg"/></span></p>
<p>2013년의 자료는 없다. 2014년에는 놀랍게도 구글에서 출전했고, 이름 값을 했다. GoogleNet이 아니라 GoogLeNet이다. 1998년에 만들어진 LeNet을 기념하기 위해 붙인 이름인 듯.</p>
<p>inception module이라는 새로운 이론을 적용했다. inception의 뜻은 처음 또는 시초, 발단이라고 되어 있다. 아무도 만들어 본 적이 없기 때문일까?</p>
<p>앞에서 본 AlexNet에 비해 많이 깊어졌다. 그러나, 많이 넓어지지는 않았다. layer에 포함된 파란 사각형의 갯수가 많아야 5개에 불과하다. 특이한 점은 모델의 처음과 끝에 FC layer가 적용됐다는 점이다. CNN에서는 보통 마지막에만 둔다. convolutional layer와 pooling layer를 이상한 조합으로 연결한 점이 특별하고, 목표까지 가기 위한 layer가 많지 않은 점도 특별하다. 그림 아래에 있는 inception module에는 hidden layer에 포함된 노드(or layer)가 7개 있는데, 최대 2개만 거치면 목표까지 갈 수 있다. 거쳐야 하는 1개 또는 2개는 반복할 때마다 달라질 것이고, 역시 균형 잡힌 결과를 얻게 된다.</p>
<p>인터넷에서 관련 논문을 잠시 찾아봤다. 놀랍게도 저자가 10명이 넘었다. 그냥 참가한 사람은 없을테니, 모델을 만드는 것이 얼마나 어려운 것인지.. 짐작할 수 있다. 교수님께서 우리도 할 수 있다고 용기를 주시고 있긴 한데.. 진짜 가능한지 모르겠다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile1.uf.tistory.com/image/272FA43557AB5C0910D7A7" style="max-width:100%;height:auto" width="764" height="413" filename="K-008.png" filemime="image/jpeg"/></span></p>
<p>2015년에 나온 따끈따끈한 사례다. 2015년에 개최된 여러 대회에서 놀라운 성적으로 우승했음을 보여주고 있다. 2등과의 격차가 장난 아니다. 그런데, 이런 정도의 격차라면 2014년의 GoogLeNet보다 못한 2등이다. 왜 그랬을까?</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile30.uf.tistory.com/image/257BED3A57AB5C0A07823A" style="max-width:100%;height:auto" width="764" height="413" filename="K-009.png" filemime="image/jpeg"/></span></p>
<p>해를 거듭할수록 layer의 갯수가 기하급수적으로 늘어나고 있다. 무려 152개의 layer를 사용했다. 그림 오른쪽에 2~3주 동안 8개의 GPU로 학습했다고 설명하고 있다. 이번에 큰 맘 먹고 장만한 내 컴퓨터는 GPU가 1개밖에 없다.</p>
<p>그런데, 정말 놀라운 것이 8배 이상의 layer로 인해 학습은 오래 걸렸지만, 실전 적용에서는 VGGNet보다 빠르다고 말하고 있다. VGGNet은 2014년에 ImageNet 대회에 출전했던 모델로 네트웍의 깊이가 성능과 중요한 관련이 있음을 보여줬다. 당시 16개의 CONV/FC layer만을 사용해서 놀라운 성적을 거두었던 모델이다.</p>
<p>어떻게 152개의 layer를 갖는 모델이 16 layer 모델보다 빠를 수 있을까?</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile25.uf.tistory.com/image/2117B43A57AB5C0B284C3F" style="max-width:100%;height:auto" width="764" height="413" filename="K-010.png" filemime="image/jpeg"/></span></p>
<p>좋은 성능을 위한 방법을 보여준다. 이상하게 보일 수 있지만, 모든 layer를 거치는 것이 아니라 일부 layer만 거치는 것이 핵심이다.</p>
<p>ResNet은 Residual Network의 약자로 residual은 '남아 있는' 정도의 뜻으로 쓰이는데, '계산이 설명되지 않는' 등의 뜻 또한 갖고 있다. 교수님께서 설명하실 때, '왜 그런지는 모르지만'이라고 말씀하셨는데, 그런 의미를 준 것일지도 모르겠다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile27.uf.tistory.com/image/2771DF3A57AB5C0B0AA110" style="max-width:100%;height:auto" width="764" height="413" filename="K-011.png" filemime="image/jpeg"/></span></p>
<p>교수님께서는 이것을 fast net이라고 말씀하셨다. 여러 layer를 건너 뛰어서 목표에 빨리 도착할 수 있기 때문에 fast라고 설명하셨다. 건너뛰는 갯수를 난수로 처리하면, 반복할 때마다 다른 결과를 얻을 수 있고, 역시 균형 잡힌 결과를 구할 수 있게 된다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile10.uf.tistory.com/image/2513113A57AB5C0C2EB034" style="max-width:100%;height:auto" width="764" height="413" filename="K-012.png" filemime="image/jpeg"/></span></p>
<p>ResNet과 GoogLeNet의 공통점을 보여주고 있다. 모양은 다르지만, 목표까지 가기 위해 거치는 layer의 갯수가 적다. ResNet은 일렬로 배치해서 건너 뛰도록 설계했고, GoogLeNet은 처음부터 길을 여러 개 만들었다.</p>
<p>GoogLeNet의 단점은 경로가 여러 개이긴 하지만, 특정 경로로 진입하면 경로에 포함된 모든 layer를 거쳐야 한다는 점이 아닐까 싶다. ResNet이 매번 통과할 때마다 거치는 layer의 구성이 달라지는 반면 GoogLeNet은 구성이 같기 때문에 다양한 결과를 만들지 못하는 것이 단점으로 보인다. ResNet이 GoogLeNet보다 더욱 균형 잡힌 결과를 만들어 낼 수 있는 구조라고 보여진다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile10.uf.tistory.com/image/247CEB3A57AB5C0C39532C" style="max-width:100%;height:auto" width="764" height="413" filename="K-013.png" filemime="image/jpeg"/></span></p>
<p>2014년에 발표한 문장 분석을 위한 CNN. 한국인 윤김 교수님께서 만드셨다. 많이 사용하는 모델이라고 말씀도 하셨다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile10.uf.tistory.com/image/2119AC3A57AB5C0D2B7F14" style="max-width:100%;height:auto" width="764" height="413" filename="K-014.png" filemime="image/jpeg"/></span></p>
<p>설명할 필요가 없는 사진, 알파고. 그림 오른쪽에는 알파고가 국면을 해석하는 단계를 순서대로 보여주고 있다. 여기에도 CNN이 사용됐다고 한다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:764px;;height:auto;max-width:100%"><img src="http://cfile7.uf.tistory.com/image/240D473A57AB5C0E02D4BB" style="max-width:100%;height:auto" width="764" height="413" filename="K-015.png" filemime="image/jpeg"/></span></p>
<p>국제적인 학술지 Paper에 실린 알파고에 대한 설명.</p>
<p>19x19x48 이미지 스택을 사용하고 있다. 바둑은 19x19개의 칸으로 구성되어 있다. 즉, 바둑판 이미지를 읽을 지는 모르지만, 19픽셀로 재구성하고 있음을 알 수 있다. 이후 이미지 크기를 패딩을 적용해서 23x23으로 바꾸었다고 설명하고 있다. 48개의 feature planes(채널)를&nbsp;사용했다는 것은 바둑돌이 하나 놓여질 때마다 해당 돌의 특징을 48가지로 판단했음을 뜻한다. 가령, 흑돌인지 백돌인지, 주변에 흑돌이 있는지 백돌이 있는지, 현재 정세가 어떠한지 등등. 바둑을 조금밖에 모르기 때문에 48가지의 특징을 짐작조차 할 수 없지만, 아무리 생각해도 48가지라는 것은 너무 엄청나다. 그랬기 때문에 이세돌을 이길 수 있었던 것 같다.</p>
<p>앞에서 배운 지식을 사용하면 대략이나마 어떻게 구성했는지 알 수 있다. 어렵긴 하지만, 한 발 나아간 것 같아 다행이다.</p><div class="daum_like_wrapper"><iframe class="daum_like_button" id="daum_like_button_54" frameborder="0" scrolling="no" allowTransparency="true" src="http://pythonkim.tistory.com/like/?uid=2072317_54&sc=404%2CblogId_2072317&url=http%3A%2F%2Fpythonkim.tistory.com%2F54&published=1470848982" style="width:100%;height:44px;margin:10px auto"></iframe></div><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-54-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-54-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=54" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/57" >41. NN의 꽃 RNN 이야기 (lec 12)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.11</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/56" >40. ConvNet을 TensorFlow로 구현하자 (MNIST 99%) (lab 11)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.11</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/54"  class ="current" >39. ConvNet의 활용예 (lec 11-3)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.11</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/53" >38. ConvNet Max pooling 과 Full Network (lec 11-2)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.11</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/52" >37. ConvNet의 Conv 레이어 만들기 (lec 11-1)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.11</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/47" >35. 딥러닝으로 MNIST 98%이상 해보기 (lab 10) 소스 코드</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.08.03</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 39. ConvNet의 활용예 (lec 11-3)"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "54"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/54"]);
_tiq.push(["__setParam", "date", "2016-08-11 02:09:42"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "12223"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__setParam", "like_ex", "{'serviceId': 'tistory', 'uniqueId': '2072317_54', 'serviceCategories': '404,blogId_2072317'}"]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_54", 
"c_title":"파이쿵 :: 39. ConvNet의 활용예 (lec 11-3)", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-08-11 02:09:42", 
"plink":"http://pythonkim.tistory.com/54", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
