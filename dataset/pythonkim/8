<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 01. TensorFlow의 설치 및 기본적인 operations (lab 01)</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="김성훈 교수님께서 올려놓은 lab으로 시작하는 텐서플로우 코딩 동영상에 관해 풀어본다. 참고로 교수님께서 사용하신 파이썬은 2.x여서, 이곳에 올라가는 모든 코드는 3.x 버전으로 수정을 해서 올릴 생각이다.  텐서플로우는 그래프라고 하는 자료구조(Data Structure)처럼 동작한다는 것을 알려주는 그림이다. 그래프는 자료구조에서 리스트, 트리 등을 배운 다음에 배우게 되는 고급 자료구조의 영역에 속하는 내용이고, 정..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/8" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/8" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="01. TensorFlow의 설치 및 기본적인 operations (lab 01)" ><meta name="by" content="사과쿵" ><meta property="og:description" content="김성훈 교수님께서 올려놓은 lab으로 시작하는 텐서플로우 코딩 동영상에 관해 풀어본다. 참고로 교수님께서 사용하신 파이썬은 2.x여서, 이곳에 올라가는 모든 코드는 3.x 버전으로 수정을 해서 올릴 생각이다.  텐서플로우는 그래프라고 하는 자료구조(Data Structure)처럼 동작한다는 것을 알려주는 그림이다. 그래프는 자료구조에서 리스트, 트리 등을 배운 다음에 배우게 되는 고급 자료구조의 영역에 속하는 내용이고, 정.." ><meta property="og:image" content="http://cfile8.uf.tistory.com/image/2135F74B5791760006C5DD" ><meta property="article:section" content="과학" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="01. TensorFlow의 설치 및 기본적인 operations (lab 01)" ><meta name="twitter:description" content="김성훈 교수님께서 올려놓은 lab으로 시작하는 텐서플로우 코딩 동영상에 관해 풀어본다. 참고로 교수님께서 사용하신 파이썬은 2.x여서, 이곳에 올라가는 모든 코드는 3.x 버전으로 수정을 해서 올릴 생각이다.  텐서플로우는 그래프라고 하는 자료구조(Data Structure)처럼 동작한다는 것을 알려주는 그림이다. 그래프는 자료구조에서 리스트, 트리 등을 배운 다음에 배우게 되는 고급 자료구조의 영역에 속하는 내용이고, 정.." ><meta property="twitter:image" content="http://cfile8.uf.tistory.com/image/2135F74B5791760006C5DD" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/8" ><meta name="plink" content="http://pythonkim.tistory.com/8" ><meta name="title" content="01. TensorFlow의 설치 및 기본적인 operations (lab 01)" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/8" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/8" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/8" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/8" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_8" /><meta property="article:published_time" content="2016-07-22T10:46:25+09:00" ><meta property="og:regDate" content="20160722104625" ><meta property="article:modified_time" content="2017-01-11T10:51:36+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/8"},"url":"http://pythonkim.tistory.com/8","headline":"01. TensorFlow의 설치 및 기본적인 operations (lab 01)","description":"김성훈 교수님께서 올려놓은 lab으로 시작하는 텐서플로우 코딩 동영상에 관해 풀어본다. 참고로 교수님께서 사용하신 파이썬은 2.x여서, 이곳에 올라가는 모든 코드는 3.x 버전으로 수정을 해서 올릴 생각이다.  텐서플로우는 그래프라고 하는 자료구조(Data Structure)처럼 동작한다는 것을 알려주는 그림이다. 그래프는 자료구조에서 리스트, 트리 등을 배운 다음에 배우게 되는 고급 자료구조의 영역에 속하는 내용이고, 정..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile8.uf.tistory.com/image/2135F74B5791760006C5DD","width":"800px","height":"800px"},"datePublished":"20160722T10:46:25+09:00","dateModified":"20170111T10:51:36+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/9","NEXT_PAGE":"\/7","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F8","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>01. TensorFlow의 설치 및 기본적인 operations (lab 01)</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.07.22 10:46</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:624px;;height:auto;max-width:100%"><img src="http://cfile22.uf.tistory.com/image/21443A39579E32890364D8" style="max-width:100%;height:auto" width="624" height="315" filename="lab_01_00.png" filemime="image/jpeg"/></span></p>
<p>김성훈 교수님께서 올려놓은 lab으로 시작하는 텐서플로우 코딩 동영상에 관해 풀어본다. 참고로 교수님께서 사용하신 파이썬은 2.x여서, 이곳에 올라가는 모든 코드는 3.x 버전으로 수정을 해서 올릴 생각이다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:561px;;height:auto;max-width:100%"><img src="http://cfile8.uf.tistory.com/image/2135F74B5791760006C5DD" style="max-width:100%;height:auto" width="561" height="396" filename="lab_02_01.png" filemime="image/jpeg"/></span></p>
<p>텐서플로우는 그래프라고 하는 자료구조(Data Structure)처럼 동작한다는 것을 알려주는 그림이다.&nbsp; 그래프는 자료구조에서 리스트, 트리 등을 배운 다음에 배우게 되는 고급 자료구조의 영역에 속하는 내용이고, 정거장처럼 보이는 노드(node)가 간선(edge)으로 연결된 다른 노드로 이동할 수 있다는 것을 전제로 한다. 연결되어 있기만 하면 어디든 가기 때문에, 이론적으로는 이동할 수 있는 노드 갯수에 제한이 없다. 그래서, 일반적으로는 노드만 중요하고 간선은 상대적으로 덜 중요하다.  단순하게 이동할 수 있는 방법만 제안하면 되기 때문에.</p>
<p>텐서플로우에서는 노드에 연산(계산, operation)을 담고, 에찌(간선)에 데이터를 담고 있다고 설명한다.&nbsp; 직역을 하면, 에찌는 노드간에 전달되는 다차원 데이터 배열(텐서)이라고 되어 있다. 처음에는 이 말이 이해가 가지 않았다. 어떻게 에찌에 데이터가 있지? 노드가 중요하기 때문에,  노드에 데이터를 담고 데이터와 데이터 사이에 연산자를 넣는 것이 맞는데..라는 생각이 끊이질 않았다.</p>
<p>스터디를 하는 과정에서 에찌에 대한 얘기가 나왔었고, 그 와중에 퍼뜩 떠올랐다. 데이터가 있고, 데이터를 연산에 전달하면 수정된 데이터가 나오고. 연산에는 입력과 출력이 있는데, 입력 데이터는 결국 에찌가 되고, 출력 데이터 또한 에찌가 될 수 있겠다는. 이 부분은 그다지 중요하지는 않다. 그냥 궁금해서 고민해 본 내용일 뿐.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:592px;;height:auto;max-width:100%"><img src="http://cfile25.uf.tistory.com/image/2479C64857917979197743" style="max-width:100%;height:auto" width="592" height="402" filename="lab_02_02.png" filemime="image/jpeg"/></span></p>
<p>텐서플로우 설치에서 회원들 사이에 말이 많았다. 맥으로 작업하기 때문에 설치에는 전혀 어려움이 없었고, 동영상에 소개된 위의 그림대로 진행했고 바로 설치됐다.  그런데, 자세히 안 봐서 몰랐는데, 윈도우에서는 직접 설치가 안 되고 도커를 사용해야 한다는 설명이 있었다. 윈도우 관련 설치는 다른 문서를 참고하기 바란다. (2016년 12월부터는 도커 없이 윈도우에 직접 설치가 가능하다. 윈도우7과 10에서 검증했다. 덕분에 우분투를 켜지 않게 됐다.)<br />
<a href="https://www.tensorflow.org/versions/r0.9/get_started/os_setup.html#pip-installation" target="_blank" class="tx-link"><span style="color: rgb(255, 94, 0);">구글 텐서플로우 pip 설치 페이지는 여기.</span></a></p>
<p><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">hello</span>()<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>a <span style="color:#f92672;">= </span>tf.constant(<span style="color:#008080;font-weight:bold;">'hello, tensorflow!'</span>)<br />    <span style="color:#66d9ef;">print</span>(a)                              <span style="color:#75715e;"># Tensor("Const:0", shape=(), dtype=string)<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    </span>sess <span style="color:#f92672;">= </span>tf.Session()<br />    result <span style="color:#f92672;">= </span>sess.run(a)<br /><br />    <span style="color:#75715e;"># 2.x 버전에서는 문자열로 출력되지만, 3.x 버전에서는 byte 자료형<br /></span><span style="color:#75715e;">    # 문자열로 변환하기 위해 decode 함수로 변환<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(result)                                 <span style="color:#75715e;"># b'hello, tensorflow!'<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(result))                           <span style="color:#75715e;"># &lt;class 'bytes'&gt;<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(result.decode(<span style="color:#660099;">encoding</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'utf-8'</span>))        <span style="color:#75715e;"># hello, tensorflow!<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(result.decode(<span style="color:#660099;">encoding</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'utf-8'</span>)))  <span style="color:#75715e;"># &lt;class 'str'&gt;<br /></span><span style="color:#75715e;">    <br /></span><span style="color:#75715e;">    # 세션 닫기<br /></span><span style="color:#75715e;">    </span>sess.close()<br /></pre><p>일단 코드는 함수로 작성을 했다.&nbsp;</p>
<p>교수님 코드에서는 파일 단위로 되어 있지만, 코드가 간단해서 여러 개를 하나의 파일에 넣다 보니까 함수로 만들어야 했다. print 함수는 오른쪽에 ()가 있기 때문에 3.x 버전인 것을 쉽게 알 수 있다. 교수님 코드에서 이것과 xrange 함수 호출만 수정하면 대부분 변환이 된다. 대단한 작업을 한 것이 전혀 아니다. print 함수 오른쪽에는 실행했을 때의 결과를 주석으로 넣어 놓았다.</p>
<p>변수 a는 문자열 상수를 저장하고 있다. 그렇다면, 앞에서 설명한 바에 따르면 내부적으로 에찌에 저장된다는 말일까? 이 부분은 확인하기는 어려워 보인다. 어찌 됐든 print(a)에서 데이터가 직접 출력되지 않는 것은 당연하다. 머신러닝에서는 현재 데이터가 무엇인지 판단할 수 없는 상황이 매우 많다. 구동시켜 보기 전에는, 즉 run 함수를 호출하기 전에는 값을 알 수 없기 때문에 일관되게 처리하기 위해서는 모든 텐서 객체에 대해 자신이 누구인지만 알려주는 요약본을 출력하는 것이 맞다.</p>
<p>구동하기 위해서는 세션이 필요하다. 아직 세션이 무엇인지 모르기 때문에, 이 부분에 대해서는 알게 되는 시점에 다시 설명한다. 텐서플로우 구동은 세션에 포함된 run 함수를 호출하면 된다.&nbsp; </p>
<p><b><span style="color: rgb(0, 0, 0);">&nbsp; sess.run(a)</span></b></p>
<p>run 호출의 결과를 type &nbsp;함수로 확인했다. 디코딩을 하기 전에는 bytes라고 하는 일종의 바이트 배열이다. 어떤 데이터인지 정확하게 알고 있기 때문에 utf-8 인코딩을 적용했고, 파이썬 문자열 타입인 str을 얻을 수 있었다.</p>
<p>세션 사용이 끝나면 닫는 것이 좋다.  코드가 종료되기 때문에 닫지 않아도 괜찮긴 하겠지만, 이런 것은 습관의 영역으로 보인다.</p>
<p><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">constant</span>()<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>a <span style="color:#f92672;">= </span>tf.constant(<span style="color:#ae81ff;">2</span>)<br />    b <span style="color:#f92672;">= </span>tf.constant(<span style="color:#ae81ff;">3</span>)<br /><br />    <span style="color:#75715e;"># with 구문을 벗어날 때, 종료 코드가 있다면 대신 호출해 줌<br /></span><span style="color:#75715e;">    # 예외가 발생한 경우에도 보장<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;font-style:italic;">with </span>tf.Session() <span style="color:#66d9ef;font-style:italic;">as </span>sess<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span>result <span style="color:#f92672;">= </span>sess.run(a<span style="color:#f92672;">+</span>b)<br />        <span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(result))             <span style="color:#75715e;"># &lt;class 'numpy.int32'&gt;<br /></span><span style="color:#75715e;">        </span><span style="color:#66d9ef;">print</span>(result)                   <span style="color:#75715e;"># 5<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">        # int 자료형과 연산 가능<br /></span><span style="color:#75715e;">        </span><span style="color:#66d9ef;">print</span>(result <span style="color:#f92672;">+ </span><span style="color:#ae81ff;">7</span>)               <span style="color:#75715e;"># 12<br /></span><span style="color:#75715e;">        </span><span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(result <span style="color:#f92672;">+ </span><span style="color:#ae81ff;">7</span>))         <span style="color:#75715e;"># &lt;class 'numpy.int64'&gt;<br /></span></pre>
<p>숫자 상수를 텐서플로우로 만들었다. with 구문을 사용하면 리소스를 정리하는 close 비슷한 함수를 호출하지 않아도 된다. with 구문에서 알아서 호출해 준다. sess.close()를 호출하지 않았다. 파일 열기와 닫기&nbsp;같은, 쌍을 이루는 코드에 주로 사용한다. as 연산자는 별칭을 주는 기능이고, with 구문에서는 변수를 만들 수 없기 때문에 as를 사용해서 이름을 주어야 한다.</p>
<p>정수를 덧셈한 결과를 저장한 자료형은 numpy 모듈에 있는 int32 자료형이다. 파이썬에서 기본적으로 사용하고 있는 int 자료형이 아닌 것이 중요하다. 파이썬은 인터프리터 방식의 엄청나게 느린 언어이기 때문에 굳이 성능을 올리겠다고 생각한다면, 파이썬 코드를 최소한으로 유지하고 모듈에 포함된 기능을 사용하면 된다.</p>
<p>numpy는 C 언어에 있는 배열과 같은 형태로 움직이는 다차원 배열을 기반으로 하는 모듈이다. 빅데이터, 머신러닝, 과학산술 등의 수치연산이 필요한 모든 경우에 최적의 성능을 보장해 준다. 그래서, 텐서플로우는 내부적으로 numpy를 사용할 수밖에 없다. 여기서는 numpy 코드가 나오면 함께 설명을 할 생각이다. 참, numpy에 대한 발음은 '넘피'와 '넘파이' 둘 중의 하나를 사용하면 되는데, 외국 동영상 등에 자주 등장하는 발음은 '넘파이'. 처음에는 '넘피'로 발음하다가 지금은 '넘파이'를 쓰고 있다.</p>
<p>마지막 줄의 코드에서 7을 더하면 자료형이 int64로 바뀐다. 이것은 numpy의 고유한 기능이다. 32비트 숫자 2개를 더하면 오버플로우(overflow)라는 데이터 넘침 현상이 일어날 수 있기 때문에 수치연산을 많이 하는 numpy에서는 이러한 오버플로우를 막기 위한 당연한 조치이다.</p>
<p><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">placeHolder</span>()<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>a <span style="color:#f92672;">= </span>tf.placeholder(tf.int16)<br />    b <span style="color:#f92672;">= </span>tf.placeholder(tf.int16)<br /><br />    add <span style="color:#f92672;">= </span>tf.add(a, b)<br />    mul <span style="color:#f92672;">= </span>tf.mul(a, b)<br /><br />    <span style="color:#66d9ef;font-style:italic;">with </span>tf.Session() <span style="color:#66d9ef;font-style:italic;">as </span>sess<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">        </span><span style="color:#75715e;"># {a: 2, b: 3}는 딕셔너리<br /></span><span style="color:#75715e;">        # key로 'a'와 'b'를 사용하고, value로 2와 3  사용<br /></span><span style="color:#75715e;">        # free_dict를 사용하지 않을 경우 None 기본값 적용<br /></span><span style="color:#75715e;">        </span>r1 <span style="color:#f92672;">= </span>sess.run(add, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{a<span style="color:#f92672;">: </span><span style="color:#ae81ff;">2</span>, b<span style="color:#f92672;">: </span><span style="color:#ae81ff;">3</span>})<br />        r2 <span style="color:#f92672;">= </span>sess.run(mul, <span style="color:#660099;">feed_dict</span><span style="color:#f92672;">=</span>{a<span style="color:#f92672;">: </span><span style="color:#ae81ff;">2</span>, b<span style="color:#f92672;">: </span><span style="color:#ae81ff;">3</span>})<br /><br />        <span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(r1))                 <span style="color:#75715e;"># &lt;class 'numpy.int16'&gt;<br /></span><span style="color:#75715e;">        </span><span style="color:#66d9ef;">print</span>(r1, r2)                   <span style="color:#75715e;"># 5, 6<br /></span></pre>
<p>placeholder는 자리만 차지하고 있는 물건이나 사람을 뜻하는 영어 단어다. 그런데, 텐서플로우에 와서 엄청나게 중요한 역할이 주어졌다. 머신러닝에 전달되는 데이터를 변경하기 위한 수단이 되었다. 머신에게 공부를 시킨 이유는 내가 궁금한 무엇을 물어보기 위해서다. 그렇다면 궁금한 것을 전달해야 하고, 전달할 수 있는 문법이 있어야 하는데, 그것이 placehoder이다.</p>
<p>placeholder를 만들 때는 우리가 궁금해 하는 데이터의 자료형에 대해 알려줘야 한다. 여기서는 매우 작은 정수를 다루기 때문에 tf.int16이라고 지정했고, 출력 결과에서는 numpy.int16이라고 표시됐다. 사용자에게, 가능하면 numpy라고 하는 생소한 이름을 언급하지 않으려는 배려라고 보여지는 부분이다.</p>
<p>add()와 mul()이라는 덧셈과 곱셈 연산(노드)을 만들었고, 어떤 데이터를 전달할지는 나중에 결정할 수 있도록 placeholder로 처리했다. with 블록 안에서 add에 대해 결과를 요청하면서 2, 3을 파라미터로 전달했다. 지금은 별거 아닌 것처럼 보이지만, 그래프 기반이라서 add()와 mul() 등을 수십 개 연결할 수 있다고 생각해 보면 엄청나게 복잡한 연산을 매우 쉽게 처리할 수 있는 효과적인 방법이라는 것을 알 수 있다. 딕셔너리(사전) 자료형을 사용하기 때문에 파라미터의 갯수에는 제한이 없다.  100개를 전달해도 괜찮고 실전에서는 이런 일이 빈번하게 일어난다고 들었다. 배우는 중이라서 직접 넣어본 적이 없다.</p>
<p><br /></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">showTensor</span>()<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span>sess <span style="color:#f92672;">= </span>tf.InteractiveSession()<br /><br />    x <span style="color:#f92672;">= </span>tf.Variable([<span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">2.0</span>])<br />    a <span style="color:#f92672;">= </span>tf.constant([<span style="color:#ae81ff;">3.0</span>, <span style="color:#ae81ff;">3.0</span>])<br /><br />    <span style="color:#75715e;"># x에 대해서 연산을 수행해서 결과를 먼저 만든다.<br /></span><span style="color:#75715e;">    </span>x.initializer.run()     <span style="color:#75715e;"># Initialize 'x' using the run() method of its initializer op.<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    </span>sub <span style="color:#f92672;">= </span>tf.sub(x, a)      <span style="color:#75715e;"># Add an op to subtract 'a' from 'x'.  Run it and print the result<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(sub.eval())       <span style="color:#75715e;"># [-2. -1.]<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'-------------------------------------'</span>)<br /><br />    <span style="color:#75715e;"># 결과를 내장하고 있다면 eval() 사용 가능. initializer 없이 x에 대해서 호출하면 비정상 종료<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(a.eval())         <span style="color:#75715e;"># [ 3.  3.]<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(x.eval())         <span style="color:#75715e;"># [ 1.  2.]<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    # -1에서 1 사이의 정규분포 난수 3개 생성. b는 1행 3열의 텐서 객체<br /></span><span style="color:#75715e;">    </span>b <span style="color:#f92672;">= </span>tf.random_uniform([<span style="color:#ae81ff;">3</span>], <span style="color:#f92672;">-</span><span style="color:#ae81ff;">1.0</span>, <span style="color:#ae81ff;">1.0</span>)<br />    <span style="color:#66d9ef;">print</span>(<span style="color:#66d9ef;">type</span>(b))          <span style="color:#75715e;"># &lt;class 'tensorflow.python.framework.ops.Tensor'&gt;<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(b.eval())         <span style="color:#75715e;"># [-0.16271138 -0.33350062  0.51194   ]<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    # tensor라면 initializer 사용<br /></span><span style="color:#75715e;">    </span>w <span style="color:#f92672;">= </span>tf.Variable(tf.random_uniform([<span style="color:#ae81ff;">5</span>, <span style="color:#ae81ff;">3</span>], <span style="color:#ae81ff;">0</span>, <span style="color:#ae81ff;">32</span>, <span style="color:#660099;">dtype</span><span style="color:#f92672;">=</span>tf.int32))<br />    w.initializer.run()<br />    <span style="color:#66d9ef;">print</span>(w.eval())         <span style="color:#75715e;"># [[15  1 21] [14 16 27] [13 30 28] [23 21 26] [15 19 16]]<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'-------------------------------------'</span>)<br /><br />    x <span style="color:#f92672;">= </span>[[<span style="color:#ae81ff;">1.</span>, <span style="color:#ae81ff;">1.</span>], [<span style="color:#ae81ff;">10.</span>, <span style="color:#ae81ff;">2.</span>]]<br />    <span style="color:#66d9ef;">print</span>(tf.reduce_mean(x).eval())         <span style="color:#75715e;"># 3.5, 전체 평균<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(tf.reduce_mean(x, <span style="color:#ae81ff;">0</span>).eval())      <span style="color:#75715e;"># [ 5.5  1.5], 0은 column<br /></span><span style="color:#75715e;">    </span><span style="color:#66d9ef;">print</span>(tf.reduce_mean(x, <span style="color:#ae81ff;">1</span>).eval())      <span style="color:#75715e;"># [ 1.  6.], 1은 row<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    </span>sess.close()<br /></pre>
<p>정말 세션을 만들고, run 함수를 정상적으로 구동해야 하는지 궁금해서 구글링을 열심히 했다. 어쨌건 세션은 반드시 필요하긴 한데, 미리 만들어 놓은 세션에 연결하기 위한 InteractiveSession 함수를 찾을 수 있었다. 세션을 만들 수 있는 방법이 두 가지 있는데, 대부분 Session 클래스를 사용한다. InteractiveSession은 주피터 등에서 코드와 설명을 함께 구성할 때만 사용한다.</p><p>코드에 대한 설명은 달아놓은 주석으로 대신한다.</p><div class="daum_like_wrapper"><iframe class="daum_like_button" id="daum_like_button_8" frameborder="0" scrolling="no" allowTransparency="true" src="http://pythonkim.tistory.com/like/?uid=2072317_8&sc=404%2CblogId_2072317&url=http%3A%2F%2Fpythonkim.tistory.com%2F8&published=1469151985" style="width:100%;height:44px;margin:10px auto"></iframe></div><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-8-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-8-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=8" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/11" >05. Linear Regression의 cost 최소화의 TensorFlow 구현 (lab 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/10" >04. Linear Regression의 cost 최소화 알고리즘의 원리 설명 (lec 03)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/9" >03. Tensorflow로 간단한 linear regression 구현 (lab 02)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/8"  class ="current" >01. TensorFlow의 설치 및 기본적인 operations (lab 01)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/7" >02. Linear Regression의 Hypothesis와 cost 설명 (lec 02)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/6" >00. 머신러닝 입문기</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.22</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 01. TensorFlow의 설치 및 기본적인 operations (lab 01)"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "8"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/8"]);
_tiq.push(["__setParam", "date", "2016-07-22 10:46:25"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "20780"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__setParam", "like_ex", "{'serviceId': 'tistory', 'uniqueId': '2072317_8', 'serviceCategories': '404,blogId_2072317'}"]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_8", 
"c_title":"파이쿵 :: 01. TensorFlow의 설치 및 기본적인 operations (lab 01)", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-07-22 10:46:25", 
"plink":"http://pythonkim.tistory.com/8", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
