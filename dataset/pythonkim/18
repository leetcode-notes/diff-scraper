<!doctype html>
<html lang="ko">

<head>

<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<link rel="alternate" type="application/rss+xml" title="파이쿵" href="http://pythonkim.tistory.com/rss" />
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
<link href="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/style.css?_T_=1470399111" rel="stylesheet">
<link rel="shortcut icon" href="/favicon.ico" />
<title>파이쿵 :: 13. 파이썬으로 Logistic Regression 직접 구현</title>

<!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
  <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
<![endif]-->
		
<!-- 구글 애널리틱스 -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-76456208-1', 'auto');
  ga('send', 'pageview');
</script>
	

<style type="text/css">
		#daumSearchBox {
			height: 21px;
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bg_search2_2.gif);
			margin: 5px auto ;
			padding: 0;
		}
		#daumSearchBox input {
			background: none;
			margin : 0;
			padding : 0;
			border : 0;
		}
		#daumSearchBox #daumLogo {
			width: 34px;
			height: 21px;
			float: left;
			margin-right: 5px;
			background-image : url(http://i1.daumcdn.net/img-media/tistory/img/bg_search1_2_2010ci.gif);
		}
		#daumSearchBox #show_q {
			background-color: transparent;
			border: none;
			font: 12px Gulim, Sans-serif;
			color: #555;
			margin-top: 4px;
			margin-right: 15px;
			float: left;
		}

		#daumSearchBox #show_btn {
			background-image : url(http://i1.daumcdn.net/imgsrc.search/search_all/show/tistory/plugin/bt_search_2.gif);
			width: 37px;
			height: 21px;
			float: left;
			margin:0;
			cursor:pointer;
			text-indent:-1000em;
		}
	</style><link rel="stylesheet" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/css/lightbox.min.css" />
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/style.css" />
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/TistoryProfileLayer/profile.js"></script>
	<style type="text/css">
		.another_category { border: 1px solid #E5E5E5; padding: 10px 10px 5px; margin:10px 0; clear: both; }
		.another_category h4 { font-size: 12px !important; margin: 0 !important; border-bottom: 1px solid #E5E5E5 !important; padding: 2px 0 6px !important; }
		.another_category h4 a { font-weight: bold !important; }
		.another_category table { table-layout: fixed; border-collapse: collapse; width: 100% !important; margin-top: 10px !important; }
		* html .another_category table { width: auto !important; }
		*:first-child+html .another_category table { width: auto !important; }
		.another_category th, .another_category td { padding: 0 0 4px !important; }
		.another_category th { text-align: left; font-size: 12px !important; font-weight: normal;  word-break: break-all; overflow: hidden; line-height: 1.5; }
		.another_category td { text-align: right; width: 80px; font-size: 11px; }
		.another_category th a { font-weight: normal; text-decoration: none; border: none !important; }
		.another_category th a.current{ font-weight: bold; text-decoration: none !important; border-bottom: 1px solid !important; }
		.another_category th span { font-weight: normal; text-decoration: none; font: 10px Tahoma, Sans-serif; border: none !important; }

		.another_category_color_gray, .another_category_color_gray h4 { border-color: #E5E5E5 !important; }
		.another_category_color_gray * { color: #909090 !important; }
		.another_category_color_gray th a.current{border-color:#909090 !important;}
		.another_category_color_gray h4, .another_category_color_gray h4 a { color: #737373 !important; }


		.another_category_color_red, .another_category_color_red h4 { border-color: #F6D4D3 !important;  }
		.another_category_color_red * { color: #E86869 !important; }
		.another_category_color_red th a.current{border-color:#E86869 !important;}
		.another_category_color_red h4, .another_category_color_red h4 a { color: #ED0908 !important; }


		.another_category_color_green, .another_category_color_green h4 { border-color: #CCE7C8 !important; }
		.another_category_color_green * { color: #64C05B !important; }
		.another_category_color_green th a.current{border-color:#64C05B !important;}
		.another_category_color_green h4, .another_category_color_green h4 a { color: #3EA731 !important; }


		.another_category_color_blue, .another_category_color_blue h4 { border-color: #C8DAF2 !important; }
		.another_category_color_blue * { color: #477FD6 !important; }
		.another_category_color_blue th a.current{border-color:#477FD6 !important;}
		.another_category_color_blue h4, .another_category_color_blue h4 a { color: #1960CA !important; }


		.another_category_color_violet, .another_category_color_violet h4 { border-color: #E1CEEC !important;  }
		.another_category_color_violet * { color:#9D64C5 !important; }
		.another_category_color_violet th a.current{border-color:#9D64C5 !important;}
		.another_category_color_violet h4, .another_category_color_violet h4 a { color: #7E2CB5 !important; }
	</style>
<script type="text/javascript">
window.TistoryBlog = {
    url: "http://pythonkim.tistory.com",
	tistoryUrl: "http://pythonkim.tistory.com"
};
var servicePath = "";
var blogURL = "";
</script>
<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/_/base.js"></script>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/dialog.css"/>
<link rel="stylesheet" type="text/css" href="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/style/menubar.css"/><style type="text/css">.tt_article_useless_p_margin p {padding-top:0 !important;padding-bottom:0 !important;margin-top:0 !important;margin-bottom:0 !important;}</style><meta name="referrer" content="always"><link rel="shortcut icon" href="http://i1.daumcdn.net/cfs.tistory/static/top/favicon_0630.ico"/><meta name="description" content="제목을 붙일 게 없어서 직접 구현한다고는 했지만, 거짓말이다. 직접 구현하려면 cost 함수와 gradient descent 알고리듬의 2개를 모두 만들어야 하는데, 여기서는 cost 함수만 구현했다. 왜 그랬는지는 차차 알아보자. import math import numpy as np # z는 값(scalar)일 수도 있고, vector 또는 matrix일 수도 있다. def sigmoid(z): return 1 / (1 + math.e ** -z) print(sigmoid(100)) print(sigmoid( 0)) print(sigmoid(-1..">

<!-- BEGIN OPENGRAPH -->
<link rel="canonical" href="http://pythonkim.tistory.com/18" /><meta property="og:type" content="article"><meta property="og:url" content="http://pythonkim.tistory.com/18" ><meta property="og:site_name" content="파이쿵" ><meta property="og:title" content="13. 파이썬으로 Logistic Regression 직접 구현" ><meta name="by" content="사과쿵" ><meta property="og:description" content="제목을 붙일 게 없어서 직접 구현한다고는 했지만, 거짓말이다. 직접 구현하려면 cost 함수와 gradient descent 알고리듬의 2개를 모두 만들어야 하는데, 여기서는 cost 함수만 구현했다. 왜 그랬는지는 차차 알아보자. import math import numpy as np # z는 값(scalar)일 수도 있고, vector 또는 matrix일 수도 있다. def sigmoid(z): return 1 / (1 + math.e ** -z) print(sigmoid(100)) print(sigmoid( 0)) print(sigmoid(-1.." ><meta property="og:image" content="http://cfile4.uf.tistory.com/image/2143434057976D22309539" ><meta property="article:section" content="과학" >
<!-- END OPENGRAPH -->



<!-- BEGIN TWITTERCARD -->
<meta name="twitter:card" content="summary_large_image"><meta name="twitter:site" content="@TISTORY"><meta name="twitter:title" content="13. 파이썬으로 Logistic Regression 직접 구현" ><meta name="twitter:description" content="제목을 붙일 게 없어서 직접 구현한다고는 했지만, 거짓말이다. 직접 구현하려면 cost 함수와 gradient descent 알고리듬의 2개를 모두 만들어야 하는데, 여기서는 cost 함수만 구현했다. 왜 그랬는지는 차차 알아보자. import math import numpy as np # z는 값(scalar)일 수도 있고, vector 또는 matrix일 수도 있다. def sigmoid(z): return 1 / (1 + math.e ** -z) print(sigmoid(100)) print(sigmoid( 0)) print(sigmoid(-1.." ><meta property="twitter:image" content="http://cfile4.uf.tistory.com/image/2143434057976D22309539" >
<!-- END TWITTERCARD -->



<!-- BEGIN DAUMAPP -->
<meta property="dg:plink" content="http://pythonkim.tistory.com/18" ><meta name="plink" content="http://pythonkim.tistory.com/18" ><meta name="title" content="13. 파이썬으로 Logistic Regression 직접 구현" ><meta name="article:media_name" content="파이쿵" ><meta property="article:mobile_url" content="http://pythonkim.tistory.com/m/18" ><meta property="article:pc_url" content="http://pythonkim.tistory.com/18" ><meta property="article:mobile_view_url" content="http://pythonkim.tistory.com/m/18" ><meta property="article:pc_view_url" content="http://pythonkim.tistory.com/18" ><meta property="article:pc_service_home" content="http://www.tistory.com" ><meta property="article:mobile_service_home" content="http://www.tistory.com/m" ><meta property="article:txid" content="2072317_18" /><meta property="article:published_time" content="2016-07-27T11:47:54+09:00" ><meta property="og:regDate" content="20160726212616" ><meta property="article:modified_time" content="2017-01-17T08:01:10+09:00" >
<!-- END DAUMAPP -->



<!-- BEGIN STRUCTURED_DATA -->
<script type="application/ld+json">{"@context":"http://schema.org", "@type":"BlogPosting","mainEntityOfPage":{"@id": "http://pythonkim.tistory.com/18"},"url":"http://pythonkim.tistory.com/18","headline":"13. 파이썬으로 Logistic Regression 직접 구현","description":"제목을 붙일 게 없어서 직접 구현한다고는 했지만, 거짓말이다. 직접 구현하려면 cost 함수와 gradient descent 알고리듬의 2개를 모두 만들어야 하는데, 여기서는 cost 함수만 구현했다. 왜 그랬는지는 차차 알아보자. import math import numpy as np # z는 값(scalar)일 수도 있고, vector 또는 matrix일 수도 있다. def sigmoid(z): return 1 / (1 + math.e ** -z) print(sigmoid(100)) print(sigmoid( 0)) print(sigmoid(-1..","author":{"@type":"Person","name":"사과쿵"},"image":{"@type":"ImageObject","url":"http://cfile4.uf.tistory.com/image/2143434057976D22309539","width":"800px","height":"800px"},"datePublished":"20160727T11:47:54+09:00","dateModified":"20170117T08:01:10+09:00","publisher":{"@type":"Organization","name":"TISTORY","logo":{"@type":"ImageObject","url":"https://t1.daumcdn.net/cssjs/icon/557567EA016E200001","width":"800px","height":"800px"}}}</script>
<!-- END STRUCTURED_DATA -->

<link rel="apple-touch-icon" href="//i1.daumcdn.net/thumb/C180x180/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="76x76" href="//i1.daumcdn.net/thumb/C76x76/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="120x120" href="//i1.daumcdn.net/thumb/C120x120/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D">
<link rel="apple-touch-icon" sizes="152x152" href="//i1.daumcdn.net/thumb/C152x152/?fname=http%3A%2F%2Fcfile4.uf.tistory.com%2Fimage%2F211AB7495706515D201F0D"></head>

<body>

<script type="text/javascript">
	T.config = {"TOP_SSL_URL":"https:\/\/www.tistory.com","PREVIEW":false,"ROLE":"guest","PREV_PAGE":"\/19","NEXT_PAGE":"\/17","BLOG":{"isDormancy":false,"title":"\ud30c\uc774\ucff5"},"NEED_COMMENT_LOGIN":false,"COMMENT_LOGIN_CONFIRM_MESSAGE":"","LOGIN_URL":"https:\/\/www.tistory.com\/auth\/login\/?redirectUrl=http%3A%2F%2Fpythonkim.tistory.com%2F18","DEFAULT_URL":"http:\/\/pythonkim.tistory.com","USER":{"name":null,"homepage":null}};
</script>

<script type="text/javascript" src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/script/blog/common.js"></script>
<div style="margin:0; padding:0; border:none; background:none; float:none; clear:none; z-index:0"></div>


<div id="header">
	<div class="container-fluid">
		<div class="row">
			<div class="col-md-12">
				<!-- Wrapper for slides 가로세로 비율(4:1)-->
				<div id="carousel" class="carousel slide" data-ride="carousel">
					<div class="centered carousel-inner" role="listbox">
						<div class="item active">
							<img src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/slider_01.png" width="100%" alt="Carousel 01">
							<div class="carousel-caption">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- header close -->

<div id="content">					<!-- 슬라이드와 본문 사이의 여백 -->
	<div class="container">
		<div class="row">				<!-- 본문 수평 마진 결정 -->
			<div class="col-md-9">
				

				

				
					<div class="entry">
						<div class="titleWrap jumbotron">
							<!-- 현재 보여지는 글의 제목 -->
							<h2>13. 파이썬으로 Logistic Regression 직접 구현</h2>
							<!-- 현재 보여지는 글 제목의 아래에 있는 레이블 박스 2개 -->
							<!--<span class="category label label-primary">머신러닝_김성훈교수님</span> -->
							<!--<span class="date label label-info">2016.07.27 11:47</span> -->
						</div>
						
						<!-- 현재 보여지는 글의 본문과 본문 아래 글 목록까지 함께. _article_rep_desc_로 동시 처리 -->
						<div class="article">
							<p>제목을 붙일 게 없어서 직접 구현한다고는 했지만, 거짓말이다. 직접 구현하려면 cost 함수와 gradient descent 알고리듬의 2개를 모두 만들어야 하는데, 여기서는 cost 함수만 구현했다. 왜 그랬는지는 차차 알아보자.</p>
<p><br /></p>
<p></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>math<br /><span style="color:#66d9ef;font-style:italic;">import </span>numpy <span style="color:#66d9ef;font-style:italic;">as </span>np<br /><br /><span style="color:#75715e;"># z는 값(scalar)일 수도 있고, vector 또는 matrix일 수도 있다.<br /></span><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">sigmoid</span>(<span style="color:#fd971f;font-style:italic;">z</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span><span style="color:#66d9ef;font-style:italic;">return </span><span style="color:#ae81ff;">1 </span><span style="color:#f92672;">/ </span>(<span style="color:#ae81ff;">1 </span><span style="color:#f92672;">+ </span>math.e <span style="color:#f92672;">** -</span><span style="color:#fd971f;font-style:italic;">z</span>)<br /><br /><span style="color:#66d9ef;">print</span>(sigmoid(<span style="color:#ae81ff;">100</span>))<br /><span style="color:#66d9ef;">print</span>(sigmoid(  <span style="color:#ae81ff;">0</span>))<br /><span style="color:#66d9ef;">print</span>(sigmoid(<span style="color:#f92672;">-</span><span style="color:#ae81ff;">10</span>))<br /><span style="color:#66d9ef;">print</span>(sigmoid(np.array([<span style="color:#ae81ff;">100</span>, <span style="color:#ae81ff;">0</span>, <span style="color:#f92672;">-</span><span style="color:#ae81ff;">10</span>])))<br /></pre><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color: rgb(255, 255, 255);">[출력 결과]</span><br /><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">1.0</span><br /></span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">0.5</span><br /></span><span style="color:#ae81ff;"><span style="color: rgb(255, 255, 255);">4.539786870243442e-05</span><br /></span><span style="color: rgb(255, 255, 255);">[  </span><span style="color: rgb(255, 255, 255);">1.00000000e+00   5.00000000e-01   4.53978687e-05</span><span style="color: rgb(255, 255, 255);">]</span><br /></pre>
<p>정말 중요한 함수인 sigmoid는 쉽게 구현할 수 있었다. 어떤 숫자가 들어와도 0과 1 사이의 값으로 변환해주는 함수로, 여기서는 100, 0, -10의 세 가지를 사용했다. 0을 넣었을 때, 가운데 값이므로 정확하게 0.5가 나와야 하는 것도 중요하다.</p>
<p>math 모듈에 자연상수 e가 들어있는 것을 찾았다. 지수 연산자인 **를 사용해서 아주 쉽게 분모를 구성했고, 분자로는 1을 주었다. 파이썬3에서는 //는 정수 나눗셈, /는 실수 나눗셈이다. sigmoid는 나중에 행렬까지 처리할 수 있어야 하기 때문에 numpy의 배열을 사용해서 검증까지 했다. 리스트는 행렬 연산을 지원하지 않는다.</p>
<p>sigmoid 함수를 아래처럼 만들 수도 있다.</p>
<p>&nbsp; <b>def sigmoid(z):<br />
&nbsp; &nbsp; &nbsp; return 1 / (1 + math.exp(-z))</b></p>
<p><br /></p>
<p style="text-align: left;"><span class="imageblock" style="display:inline-block;;height:auto;max-width:100%"><a href="http://pythonkim.tistory.com/attachment/cfile2.uf@2102AB4B579777E50F0391.txt"><img src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/image/extension/txt.gif" alt="" style="vertical-align: middle;" /> ex2data1.txt</a></span><span style="color: rgb(255, 94, 0);"> - 소스코드에서 사용하는 데이터 파일.</span></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#66d9ef;font-style:italic;">import </span>math<br /><span style="color:#66d9ef;font-style:italic;">import </span>numpy <span style="color:#66d9ef;font-style:italic;">as </span>np<br /><span style="color:#66d9ef;font-style:italic;">import </span>matplotlib.pyplot <span style="color:#66d9ef;font-style:italic;">as </span>plt<br /><br /><span style="color:#75715e;"># z는 값(scalar)일 수도 있고, vector 또는 matrix일 수도 있다.<br /></span><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">sigmoid</span>(<span style="color:#fd971f;font-style:italic;">z</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;">    </span><span style="color:#66d9ef;font-style:italic;">return </span><span style="color:#ae81ff;">1 </span><span style="color:#f92672;">/ </span>(<span style="color:#ae81ff;">1 </span><span style="color:#f92672;">+ </span>math.e <span style="color:#f92672;">** -</span><span style="color:#fd971f;font-style:italic;">z</span>)<br /><br /><span style="color:#66d9ef;font-style:italic;">def </span><span style="color:#a6e22e;">costFunction</span>(<span style="color:#fd971f;font-style:italic;">W</span>, <span style="color:#fd971f;font-style:italic;">X</span>, <span style="color:#fd971f;font-style:italic;">y</span>)<span style="color:#f92672;">:<br /></span><span style="color:#f92672;"><br /></span><span style="color:#f92672;">    </span>m <span style="color:#f92672;">= </span><span style="color:#fd971f;font-style:italic;">y</span>.size                  <span style="color:#75715e;"># 100<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    # 최초 실행시 값 : [[ 0.5] [ 0.5] [ 0.5] ... [ 0.5]]<br /></span><span style="color:#75715e;">    </span>h <span style="color:#f92672;">= </span>sigmoid(np.dot(<span style="color:#fd971f;font-style:italic;">W</span>, <span style="color:#fd971f;font-style:italic;">X</span>))   <span style="color:#75715e;"># 1행 m열<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;">    # 값 1개. 곱셈(*)은 element-wise 곱셈<br /></span><span style="color:#75715e;">    </span>cost <span style="color:#f92672;">= -</span>(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">/</span>m) <span style="color:#f92672;">* </span><span style="color:#66d9ef;">sum</span>(<span style="color:#fd971f;font-style:italic;">y</span><span style="color:#f92672;">*</span>np.log(h) <span style="color:#f92672;">+ </span>(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">-</span><span style="color:#fd971f;font-style:italic;">y</span>)<span style="color:#f92672;">*</span>np.log(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">-</span>h))<br /><br />    <span style="color:#75715e;"># (h-y)는 1행 m열<br /></span><span style="color:#75715e;">    </span>grad <span style="color:#f92672;">= </span>(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">/</span>m) <span style="color:#f92672;">* </span>np.dot(<span style="color:#fd971f;font-style:italic;">X</span>, h<span style="color:#f92672;">-</span><span style="color:#fd971f;font-style:italic;">y</span>)<br /><br />    <span style="color:#66d9ef;font-style:italic;">return </span>cost, grad<br /><br /><span style="color:#75715e;"># ex2data1.txt 파일에는 아래와 같은 줄이 100개 있다. 쉼표로 구분할 수 있는 csv 파일.<br /></span><span style="color:#75715e;"># 34.62365962451697,78.0246928153624,0<br /></span><span style="color:#75715e;"># 30.28671076822607,43.89499752400101,0<br /></span><span style="color:#75715e;"># 35.84740876993872,72.90219802708364,0<br /></span><span style="color:#75715e;"># 60.18259938620976,86.30855209546826,1<br /></span><span style="color:#75715e;"># 79.0327360507101,75.3443764369103,1<br /></span><span style="color:#75715e;"><br /></span>xy <span style="color:#f92672;">= </span>np.loadtxt(<span style="color:#008080;font-weight:bold;">'ex2data1.txt'</span>, <span style="color:#660099;">unpack</span><span style="color:#f92672;">=</span><span style="color:#66d9ef;font-style:italic;">True</span>, <span style="color:#660099;">dtype</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'float32'</span>, <span style="color:#660099;">delimiter</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">','</span>)<br /><br /><span style="color:#66d9ef;">print</span>(xy.shape)     <span style="color:#75715e;"># (3, 100). 행과 열을 바꿔서 읽어온다.<br /></span><span style="color:#66d9ef;">print</span>(xy[<span style="color:#f92672;">:</span>,<span style="color:#f92672;">:</span><span style="color:#ae81ff;">5</span>])     <span style="color:#75715e;"># numpy 문법. 리스트는 안됨<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># [[ 34.62366104  30.28671074  35.84740829  60.18259811  79.03273773]<br /></span><span style="color:#75715e;">#  [ 78.02469635  43.89499664  72.90219879  86.3085556   75.34437561]<br /></span><span style="color:#75715e;">#  [  0.           0.           0.           1.           1.        ]]<br /></span><span style="color:#75715e;"><br /></span>x_data <span style="color:#f92672;">= </span>xy[<span style="color:#f92672;">:-</span><span style="color:#ae81ff;">1</span>]                    <span style="color:#75715e;"># 2행 100열. 정확하게는 2차원 배열<br /></span>y_data <span style="color:#f92672;">= </span>xy[<span style="color:#f92672;">-</span><span style="color:#ae81ff;">1</span>]                     <span style="color:#75715e;"># 1행 100열. 정확하게는 1차원 배열<br /></span><span style="color:#75715e;"><br /></span><span style="color:#75715e;"># y_data가 1 또는 0인 값의 인덱스 배열 생성<br /></span>pos <span style="color:#f92672;">= </span>np.where(y_data<span style="color:#f92672;">==</span><span style="color:#ae81ff;">1</span>)<br />neg <span style="color:#f92672;">= </span>np.where(y_data<span style="color:#f92672;">==</span><span style="color:#ae81ff;">0</span>)<br /><br /><span style="color:#75715e;"># 옥타브와 비슷한 형태로 그래프 출력<br /></span><span style="color:#75715e;"># x_data[0,pos]에서 0은 행, pos는 열을 가리킨다. 쉼표 양쪽에 범위 또는 인덱스 배열 지정 가능.<br /></span>t1 <span style="color:#f92672;">= </span>plt.plot(x_data[<span style="color:#ae81ff;">0</span>,pos], x_data[<span style="color:#ae81ff;">1</span>,pos], <span style="color:#660099;">color</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'black'</span>, <span style="color:#660099;">marker</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'+'</span>, <span style="color:#660099;">markersize</span><span style="color:#f92672;">=</span><span style="color:#ae81ff;">7</span>)<br />t2 <span style="color:#f92672;">= </span>plt.plot(x_data[<span style="color:#ae81ff;">0</span>,neg], x_data[<span style="color:#ae81ff;">1</span>,neg], <span style="color:#660099;">markerfacecolor</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'yellow'</span>, <span style="color:#660099;">marker</span><span style="color:#f92672;">=</span><span style="color:#008080;font-weight:bold;">'o'</span>, <span style="color:#660099;">markersize</span><span style="color:#f92672;">=</span><span style="color:#ae81ff;">7</span>)<br /><br />plt.xlabel(<span style="color:#008080;font-weight:bold;">'exam 1 score'</span>)<br />plt.ylabel(<span style="color:#008080;font-weight:bold;">'exam 2 score'</span>)<br />plt.legend([t1[<span style="color:#ae81ff;">0</span>], t2[<span style="color:#ae81ff;">0</span>]], [<span style="color:#008080;font-weight:bold;">'Admitted'</span>, <span style="color:#008080;font-weight:bold;">'Not admitted'</span>])        <span style="color:#75715e;"># 범례<br /></span><span style="color:#75715e;"><br /></span>plt.show()<br /><br /><span style="color:#75715e;"># ---------------------------------------------------------------------- #<br /></span><span style="color:#75715e;"><br /></span>n, m <span style="color:#f92672;">= </span>x_data.shape         <span style="color:#75715e;"># [2, 100]. 행과 열의 크기<br /></span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'m, n :'</span>, m, n)<br /><br /><span style="color:#75715e;"># 1로 구성된 배열을 맨 앞에 추가<br /></span>x_data <span style="color:#f92672;">= </span>np.vstack((np.ones(m), x_data))<br /><span style="color:#66d9ef;">print</span>(x_data.shape)         <span style="color:#75715e;"># 100<br /></span><span style="color:#66d9ef;">print</span>(x_data[<span style="color:#f92672;">:</span>,<span style="color:#f92672;">:</span><span style="color:#ae81ff;">5</span>])<br /><br /><span style="color:#75715e;"># [[  1.           1.           1.           1.           1.        ]<br /></span><span style="color:#75715e;">#  [ 34.62366104  30.28671074  35.84740829  60.18259811  79.03273773]<br /></span><span style="color:#75715e;">#  [ 78.02469635  43.89499664  72.90219879  86.3085556   75.34437561]]<br /></span><span style="color:#75715e;"><br /></span>W <span style="color:#f92672;">= </span>np.zeros(n<span style="color:#f92672;">+</span><span style="color:#ae81ff;">1</span>)           <span style="color:#75715e;"># [ 0.  0.  0.]. 1행 3열<br /></span><span style="color:#75715e;"><br /></span>cost, grad <span style="color:#f92672;">= </span>costFunction(W, x_data, y_data)<br /><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'------------------------------'</span>)<br /><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'cost :'</span>,  cost)      <span style="color:#75715e;"># cost : 0.69314718056<br /></span><span style="color:#66d9ef;">print</span>(<span style="color:#008080;font-weight:bold;">'grad :'</span>, <span style="color:#f92672;">*</span>grad)      <span style="color:#75715e;"># grad : -0.1 -12.0092164707 -11.2628421021<br /></span></pre>
<p>앤드류 교수님 수업에 나오는 과제를 파이썬으로 옮겨 보았다. 코딩은 좀 하는 편인데, 여기 와선 도대체 뭘 하라는 건지 감을 못잡겠다. 어찌어찌 컨닝도 하고 해가면서 간신히 만들었다. 출력 결과는 주석에 실은 관계로 따로 표시하지는 않았다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># 최초 실행시 값 : [[ 0.5] [ 0.5] [ 0.5] ... [ 0.5]]<br /></span>h <span style="color:#f92672;">= </span>sigmoid(np.dot(<span style="color:#fd971f;font-style:italic;">W</span>, <span style="color:#fd971f;font-style:italic;">X</span>))   <span style="color:#75715e;"># 1행 m열<br /></span></pre>
<p>sigmoid 함수는 앞에서 이미 봤다. costFunction 함수야말로 이번 코드의 핵심이다. costFunction 함수에서 sigmoid를 호출하고 있다.</p>
<p>&nbsp; H(X) = Wx + b</p>
<p>이 공식은 linear regression에서 hypothesis에 해당하는 핵심 공식으로, cost를 계산하는 기초가 된다. Logistic Regression이 나온 이유가, 이 공식의 결과가 1보다 크거나 0보다 작을 수 있기 때문이었다. 다시 말해, 이 공식의 결과를 sigmoid에 전달해야 한다는 것이다.</p>
<p>W와 X는 모두 행렬이기 때문에 행렬 곱셈을 수행한 결과를 전달해야 한다. sigmoid 호출 결과는 행렬이 들어왔다면, 그와 똑같은 형태의 행렬을 반환한다. numpy에서의 행렬 곱셈은 dot 함수가 수행한다. W는 1행 3열, X는 3행 100열이므로 결과인 h는 1행 100열이 된다. 여기서는 이 함수를 1회 호출하므로, h에 들어가는 결과는 주석에 있는 것처럼 전체가 0.5이다.</p>
<p><br /></p>
<p></p><pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># 값 1개. 곱셈(*)은 element-wise 곱셈<br /></span>cost <span style="color:#f92672;">= -</span>(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">/</span>m) <span style="color:#f92672;">* </span><span style="color:#66d9ef;">sum</span>(<span style="color:#fd971f;font-style:italic;">y</span><span style="color:#f92672;">*</span>np.log(h) <span style="color:#f92672;">+ </span>(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">-</span><span style="color:#fd971f;font-style:italic;">y</span>)<span style="color:#f92672;">*</span>np.log(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">-</span>h)  )<br /></pre>
<p>-(1/m) ∑ylog(H(x)) + (1-y)log(1-H(x))을 구현하고 있다. h는 앞에서 sigmoid에 적용한 결과로 모든 값은 0과 1 사이에 있다는 것을 보장한다. y와 log(h)를 곱하고, (1-y)와 log(1-h)를 곱한다. 이때 행렬 곱셈이 아니라 같은 자리끼리 곱하는 element-wise 곱셈이다. 3행 5열끼리의 곱셈처럼, 곱셈에 참여하는 행렬의 크기가 서로 같아야 한다. cost 변수에 들어가는 결과는 비용이라고 부르는 값 1개이다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># (h-y)는 1행 m열<br /></span>grad <span style="color:#f92672;">= </span>(<span style="color:#ae81ff;">1</span><span style="color:#f92672;">/</span>m) <span style="color:#f92672;">* </span>np.dot(<span style="color:#fd971f;font-style:italic;">X</span>, h<span style="color:#f92672;">-</span><span style="color:#fd971f;font-style:italic;">y</span>)<br /></pre>
<p>h와 y는 모두 1차원 배열이고 크기는 똑같이 m개를 갖고 있다. element-wise 뺄셈을 적용한다. X와 (h-y)를 행렬 곱셈한다. X는 3행 100열, (h-y)는 1행 100이다. 일반적인 행렬 연산에서는 에러가 발생해야 한다. 뒤에 오는 (h-y)는 100행 1열이어야 어울리기 때문이다. 그러나, 이 경우 numpy는 행렬 연산을 100행 1열인 것처럼 적용해서 결과는 1행 100열로 변환까지 해준다. np.dot(X, h-y)의 결과는 크기가 m인 1차원 배열이 된다. 여기에 element-wise 곱셈인 1/m을 한다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><span class="imageblock" style="display:inline-block;width:566px;;height:auto;max-width:100%"><img src="http://cfile4.uf.tistory.com/image/2143434057976D22309539" style="max-width:100%;height:auto" width="566" height="447" filename="lab_05_03.png" filemime="image/jpeg"/></span></p>
<p>matplotlib 모듈을 사용해서 x_data를 그래프로 출력했다. 앤드류 교수님 과제 제출에 이것도 포함되어 있어서 비슷하게 만들어 봤다. 파이썬 그래프는 핵심이 아니니까, 설명은 코드에 있는 주석으로 대신한다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># 1로 구성된 배열을 맨 앞에 추가<br /></span>x_data <span style="color:#f92672;">= </span>np.vstack((np.ones(m), x_data))<br /></pre>
<p>numpy에서 새로운 행을 맨 앞에 추가하기 위한 코드다. 정확하게는 2개의 배열을 연동해서 새로운 배열을 만든다. y 절편에 해당하는 b를 행렬의 맨 앞에 추가해야 Wx + b의 코드가 완성된다. ones 함수는 원하는 형태의 배열을 만들고 1로 채워준다. 뒤에는 0으로 채워주는 zero 함수도 나온다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;">W <span style="color:#f92672;">= </span>np.zeros(n<span style="color:#f92672;">+</span><span style="color:#ae81ff;">1</span>)           <span style="color:#75715e;"># [ 0.  0.  0.]. 1행 3열<br /></span>cost, grad <span style="color:#f92672;">= </span>costFunction(W, x_data, y_data)<br /></pre>
<p>장황하게 설명했던 costFunction 함수를 호출하고 있다. W는 초기값으로 1차원 배열로 만들고 모두 0을 넣었다. 0에 대한 sigmoid 값은 0.5다. 김성훈 교수님 동영상 그래프에 그렇게 그려져 있다.</p>
<p>앤드류 교수님 과제에서 costFunction 함수를 사용하는데, 일단 이것 또한 정답이다. 아쉬운 점은 앞서 말했듯이 decision boundary와 같은 직선을 그어서 시각적으로 그룹을 나누려면 log로 되어 있는 cost 함수를 미분해야 하는 엄청난 문제에 봉착한다. 그래서, 앤드류 교수님도 이 부분에 대해서는 코드를 공개해서 그냥 확인할 수 있도록 했다.</p>
<p>미분을 다룰 수 있는 사람이라면 앞의 코드에 살을 붙여서 decision boundary 직선까지 출력할 수 있도록 하면 좋겠다.</p>
<p><br /></p>
<pre style="background-color:#272822;color:#f8f8f2;font-family:'Menlo';font-size:9.0pt;"><span style="color:#75715e;"># decision boundary 직선. 앤드류 교수님. <br /></span><span style="color:#75715e;"># 안에 들어있는 값은 gradient descent 알고리듬을 구현한 이후에 발생한 값<br /></span><span style="color:#75715e;"># x값은 x_data에서의 최소값과 최대값. y값은 W값을 이용해서 계산된 값.<br /></span>plt.plot([<span style="color:#ae81ff;">28.059</span>, <span style="color:#ae81ff;">101.828</span>], [<span style="color:#ae81ff;">96.166</span>, <span style="color:#ae81ff;">20.653</span>], <span style="color:#008080;font-weight:bold;">'b'</span>)<br /></pre>
<p>이 코드를 plt.show() 함수 앞에 추가하면 decision boundary 직선을 볼 수 있다. decision boundary는 직선일 수도 있고 타원일 수도 있고, 상황에 따라 달라진다.</p>
<p><br /></p>
<p style="text-align: center; clear: none; float: none;"><table cellspacing="5" cellpadding="0" border="0" align="center"><tbody><tr><td><span class="imageblock" style="display:inline-block;width:400px;;height:auto;max-width:100%"><span data-url="http://cfile23.uf.tistory.com/attach/2655CE4D579774050FEE58" data-lightbox="lightbox"><img src="http://cfile23.uf.tistory.com/image/2655CE4D579774050FEE58" style="cursor: pointer;max-width:100%;height:auto" width="400" height="308" filename="lab_05_04.png" filemime="image/jpeg" /></span></span></td><td><span class="imageblock" style="display:inline-block;width:400px;;height:auto;max-width:100%"><span data-url="http://cfile6.uf.tistory.com/attach/2562034B5797763B27BFC1" data-lightbox="lightbox"><img src="http://cfile6.uf.tistory.com/image/2562034B5797763B27BFC1" style="cursor: pointer;max-width:100%;height:auto" width="400" height="307" filename="lab_05_05.png" filemime="image/jpeg" /></span></span></td></tr></tbody></table></p>
<p>왼쪽 그림은 앞의 코드에서 출력한 그래프이고, 오른쪽 그림은 앤드류 교수님 수업에서 출력한 그래프다. 데이터를 정확히 2개의 그룹으로 나눌 수도 있는데, 머신러닝의 최대 적인 오버피팅(overfitting)을 만난 것이므로 굉장히 잘못된 decision boundary가 된다.</p><div class="daum_like_wrapper"><iframe class="daum_like_button" id="daum_like_button_18" frameborder="0" scrolling="no" allowTransparency="true" src="http://pythonkim.tistory.com/like/?uid=2072317_18&sc=404%2CblogId_2072317&url=http%3A%2F%2Fpythonkim.tistory.com%2F18&published=1469587674" style="width:100%;height:44px;margin:10px auto"></iframe></div><div style="width:100%;margin-top:30px;clear:both;height:30px">		<div class="entry-ccl" style="float:right;margin-top:0;height:0">
			<a href="http://creativecommons.org/licenses/by/4.0/deed.ko" target="_blank" style="text-decoration: none">
				<img id="ccl-icon-18-0" class="entry-ccl-by" src="//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/editor/ccl_black01.png"
				     onmouseover="tistoryCcl.show(this, 3)"
				     onmouseout="tistoryCcl.hide()" alt="저작자 표시" style="width:15px;height:15px"/>
								<!--
	<rdf:RDF xmlns="http://web.resource.org/cc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
		<Work rdf:about="">
			<license rdf:resource="http://creativecommons.org/licenses/by-fr/2.0/kr/" />
		</Work>
		<License rdf:about="http://creativecommons.org/licenses/by-fr/">
			<permits rdf:resource="http://web.resource.org/cc/Reproduction"/>
			<permits rdf:resource="http://web.resource.org/cc/Distribution"/>
			<requires rdf:resource="http://web.resource.org/cc/Notice"/>
			<requires rdf:resource="http://web.resource.org/cc/Attribution"/>
			<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks"/>
		</License>
	</rdf:RDF>
	-->
			</a>
		</div>
					<script type="text/javascript">
				if (/MSIE [0-6]\./.test(navigator.userAgent)) {
					for (var i = 0; i <1; i++) {
						var el = document.getElementById('ccl-icon-18-' + i);
						el.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + el.src + '",sizingMethod="image")';
						el.src = '//i1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/static/admin/form/s.gif';
					}
				}
			</script>
			<div style="width:31px;float:left;"><a href="/toolbar/popup/abuseReport/?entryId=18" onclick="window.open(this.href, 'tistoryThisBlogPopup', 'width=550, height=510, toolbar=no, menubar=no, status=no, scrollbars=no'); return false;"><img style="border:0" src="//t1.daumcdn.net/tistory_admin/static/ico/ico_spam_report.png" alt="신고"></a></div></div><div class="another_category another_category_color_gray">
<h4>'<a href="/category/머신러닝_김성훈교수님">머신러닝_김성훈교수님</a>' 카테고리의 다른 글</h4>
<table>
<tr>
<th>
<a href="http://pythonkim.tistory.com/20" >15. Softmax classifier 의 cost함수 (lec 06-2)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.27</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/19" >14. Softmax Regression- 기본 개념 소개 (lec 06-1)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.27</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/18"  class ="current" >13. 파이썬으로 Logistic Regression 직접 구현</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.27</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/17" >12. TensorFlow로 Logistic Classification의 구현하기 (lab 05)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.27</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/22" >11. Logistic Regression의 cost 함수 설명 (lec 05-2)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.27</td>
</tr>
<tr>
<th>
<a href="http://pythonkim.tistory.com/16" >10. Logistic Classification의 가설 함수 정의 (lec 05-1)</a>&nbsp;&nbsp;<span>(0)</span>
</th>
<td>
2016.07.26</td>
</tr>
</table></div>
						</div>

						<!-- 글 목록 하단의 프로필. 이미지와 간략한 소개 나오는 곳 -->
						<!-- 프로필 아래에 "받은 트랙백이 없고, 댓글이 없습니다." <div class="actionTrail"> -->
						
					</div> 					<!-- end of entry -->
				

			<!-- 하단 목록 번호 1 2 3 .. 9 10 <s_paging> -->
			</div>
			
			<div class="col-md-3">
				<!-- 기본 사이드바 -->
				<div class="sidebar">
				
					<!-- 오른쪽 사이드바의 공지사항 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. b 태그 추가했다 -->
						
							<div id="notice" class="widget">
								<h3><i class="fa fa-bullhorn"></i>공지사항</h3>
								<ul class="fa-ul">
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/77"><b>파이썬 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/76"><b>머신러닝 동영상</b></a> </li>
									
										<li><i class="fa-ul fa fa-chevron-right"></i>
											<a href="/notice/25"><b>머신러닝 목차</b></a> </li>
									
								</ul>
							</div>
						
					
					<!-- 오른쪽 사이드바의 카테고리 모듈. 없앨려면, s_sidebar_element 안쪽을 주석으로 막아야 한다. -->
						<div id="category" class="widget">
							<h3><i class="fa fa-folder"></i>카테고리</h3>
							<ul class="tt_category">
	<li class="">
		<a class="link_tit" href="/category">
			분류 전체보기							<span class="c_cnt">(70)</span>
			
					</a>

				<ul class="category_list">
							<li class="">
					<a class="link_item" href="/category/프로필">
						프로필													<span class="c_cnt">(0)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝">
						머신러닝													<span class="c_cnt">(3)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/머신러닝_김성훈교수님">
						머신러닝_김성훈교수님													<span class="c_cnt">(45)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/텐서플로우">
						텐서플로우													<span class="c_cnt">(12)</span>
						
											</a>

					
				</li>
							<li class="">
					<a class="link_item" href="/category/이것저것">
						이것저것													<span class="c_cnt">(10)</span>
						
											</a>

					
				</li>
					</ul>
			</li>
</ul>

						</div>
					
						<div class="author alert alert-success">
							<img src="http://cfile4.uf.tistory.com/image/211AB7495706515D201F0D" alt="블로그 이미지" 
									 class="img-responsive img-circle text-center" width="50%">
							<p><span class="text label label-primary"></span></p>
							<p>얼떨결에 붙인 이름 파이썬_킴</p>
						</div>
					
				</div>
			</div>
		</div>
	</div>
</div>
<!--	
<div id="footer">
	<div class="container">
		<div class="row">
				<div class="copyright">
					<p class="text-center">Copyright 2016 파이썬_킴. All Rights Reserved.<br/>
				</div>
		</div>
	</div>
</div>
-->


<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
<!-- Include all compiled plugins (below), or include individual files as needed -->
<script src="//s1.daumcdn.net/cfs.tistory/custom/blog/207/2072317/skin/images/bootstrap.min.js"></script>
<script>
$(window).scroll(function() {
  if ($(document).scrollTop() > 50) {
    $('nav').addClass('shrink');
  } else {
    $('nav').removeClass('shrink');
  }
});
</script>
<script id="DragSearchJs" type="text/javascript" src="http://s1.daumcdn.net/img.search/front/js/searchDragSelection.js?nil_ch=tistory" charset="euc-kr"></script>
<script>
$("body").bind('copy', function (e) {
    if (typeof window.getSelection == "undefined") {//IE8 or earlier...
        event.preventDefault();

        var pagelink = '\n\n 출처: ' + decodeURI(document.location.href),
            copytext =  window.getSelection() + pagelink;

        if (window.clipboardData) {
            window.clipboardData.setData('Text', copytext);
        }
        return;
    }
    var body_element = document.getElementsByTagName('body')[0];
    var selection = window.getSelection();

    //if the selection is short let's not annoy our users
    if (("" + selection).length < 30) return;

    //create a div outside of the visible area
    var newdiv = document.createElement('div');
    newdiv.style.position = 'absolute';
    newdiv.style.left = '-99999px';
    body_element.appendChild(newdiv);
    newdiv.appendChild(selection.getRangeAt(0).cloneContents());

    //we need a <pre> tag workaround
    //otherwise the text inside "pre" loses all the line breaks!
    if (selection.getRangeAt(0).commonAncestorContainer.nodeName == "PRE") {
        newdiv.innerHTML = "<pre>" + newdiv.innerHTML + "</pre>";
    }

    newdiv.innerHTML += "<br /><br />출처: <a href='"
        + document.location.href + "'>"
        + decodeURI(document.location.href) + "</a> [파이쿵]";

    selection.selectAllChildren(newdiv);
    window.setTimeout(function () { body_element.removeChild(newdiv); }, 200);
});
</script><script> if (!window.jQuery) document.write("<script src=\"http://t1.daumcdn.net/tistory_admin/lib/jquery-1.12.4.min.js\"><\/script>") </script>
	<script src="//s1.daumcdn.net/cfs.tistory/resource/0c59a9d20b31be342e2141a1d0559a4755f3d334/blog/plugins/lightbox/assets/js/lightbox.min.js"></script>
	<script>
	    lightbox.option({
			"fadeDuration": 200,
		    "resizeDuration": 200,
		    "wrapAround": false,
			"albumLabel": "%1 / %2",
			"fitImagesInViewport":true ,
			"stopEvent": false
	    })
	</script><script type="text/javascript">
var _tiq = 'undefined' !== typeof _tiq ? _tiq : []; // Global Variables
_tiq.push(["__setParam", "title", "파이쿵 :: 13. 파이썬으로 Logistic Regression 직접 구현"]);
_tiq.push(["__setParam", "svcdomain", "user.tistory.com"]);
_tiq.push(["__setParam", "category", ""]);
_tiq.push(["__setParam", "articleno", "18"]);
_tiq.push(["__setParam", "plink", "http://pythonkim.tistory.com/18"]);
_tiq.push(["__setParam", "date", "2016-07-27 11:47:54"]);
_tiq.push(["__setParam", "author", "pythonkim"]);
_tiq.push(["__setParam", "length", "22244"]);
_tiq.push(["__setParam", "isauthor", "N"]);
_tiq.push(["__setParam", "ishidden", "1"]);
_tiq.push(["__setParam", "comments", "0"]);
_tiq.push(["__setParam", "param1", "0"]);
_tiq.push(["__setParam", "param2", "e"]);
_tiq.push(["__setParam", "param3", ""]);
_tiq.push(["__setParam", "like_ex", "{'serviceId': 'tistory', 'uniqueId': '2072317_18', 'serviceCategories': '404,blogId_2072317'}"]);
_tiq.push(["__trackPageview"]);
(function(d) {
	var se = d.createElement('script'); se.type = 'text/javascript'; se.async = true;
	se.src = location.protocol + '//m2.daumcdn.net/tiara/js/td.min.js';
	var s = d.getElementsByTagName('head')[0]; s.appendChild(se);
})(document);
</script>
<script type="text/javascript">
var __TiaraObj = __TiaraObj || {}; if ('undefined' === typeof __TiaraObj.startTime) { __TiaraObj.startTime = new Date(); }
var addEvent = function (evt, fn) { window.addEventListener ? window.addEventListener(evt, fn, false) : window.attachEvent('on' + evt, fn); };
var ua = navigator.userAgent.toLowerCase(); var isIOS = /iP[ao]d|iPhone/i.test(ua); var contentStat = function() {
_tiq.push(['__content', 't_content', {
"c_id":"2072317_18", 
"c_title":"파이쿵 :: 13. 파이썬으로 Logistic Regression 직접 구현", 
"type":"article", 
"author":"사과쿵", 
"author_id":"1415031", 
"cp":"pythonkim", 
"cp_id":"2072317", 
"regdata":"2016-07-27 11:47:54", 
"plink":"http://pythonkim.tistory.com/18", 
"media":"pcweb", 
"comment_cnt":0, 
"duration": (new Date()).getTime() - __TiaraObj.startTime.getTime()
}]); };
addEvent(isIOS ? "pagehide" : "beforeunload", contentStat);
</script>
<script type="text/javascript">window.roosevelt_params_queue = window.roosevelt_params_queue || []; window.roosevelt_params_queue.push({channel_id: "dk", channel_label: "tistory"});</script>
<script type="text/javascript" src="//adimg.daumcdn.net/rt/dk_bt/roosevelt_dk_bt.js" async></script><script type="text/javascript">if(window.console!=undefined){setTimeout(console.log.bind(console,"%cTISTORY","font:8em Arial;color:#EC6521;font-weight:bold"),0);setTimeout(console.log.bind(console,"%c  나를 표현하는 블로그","font:2em sans-serif;color:#333;"),0);}</script>		<div id="tistorytoolbarid"
		     style="position:absolute;height:20px;top:4px;right:0px;background-color:transparent;background-image:none;z-index:11;">
			<div class="tistorytoolbar tt_menubar_login">
				<div
					class="tt_menubar_whiteBar">
					<div id="ttMenubarInnerWrap" class="tt_menubar_inner">
						<div class="tt_menubar_bg_toolbar"></div>
						<h2 style="display:none;">티스토리 툴바</h2>
						<div class="tt_menubar_mainmenu"><a
								class="tt_menubar_link_tit tt_menubar_link_tit_daum tt_menubar_link_tit_eng"
								href="http://www.daum.net/?nil_ref=tistory"
								target="_blank">Daum</a></div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_mainmenu"><a class="tt_menubar_link_tit tt_menubar_link_tit_eng"
						                                    href="http://www.tistory.com">Tistory</a>
						</div>
						<div class="tt_menubar_bg_bar"></div>
						<div class="tt_menubar_logout"><a class="tt_menubar_link_tit"
														  href="https://www.tistory.com/auth/login">로그인</a>
						</div>
					</div>
				</div>
			</div>
		</div>
		</body>
</html>
